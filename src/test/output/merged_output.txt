========== 目录: compose-webview-multiplatform ==========

--- 文件: D:\code\compose-webview-multiplatform\build.gradle.kts ---
--- 大小: 1.04 KB | 修改时间: Thu Jun 05 01:05:11 CST 2025 ---

plugins {
    // this is necessary to avoid the plugins to be loaded multiple times
    // in each subproject's classloader
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.android.library) apply false
    alias(libs.plugins.compose.multiplatorm) apply false
    alias(libs.plugins.kotlin.multiplatform) apply false
    alias(libs.plugins.kotlin.serialization) apply false
    alias(libs.plugins.maven.publish) apply false

    alias(libs.plugins.dokka)
    alias(libs.plugins.kotlin.atomicfu)
    alias(libs.plugins.ktlint)
}

subprojects {
    apply(plugin = "org.jlleitschuh.gradle.ktlint") // Version should be inherited from parent

    // Optionally configure plugin
    configure<org.jlleitschuh.gradle.ktlint.KtlintExtension> {
        version.set("1.0.1")
        filter {
            exclude("**/generated/**")
            include("**/kotlin/**")
        }
    }
}

tasks.register<Copy>("setUpGitHooks") {
    group = "help"
    from("$rootDir/.hooks")
    into("$rootDir/.git/hooks")
}

--- 文件结束: build.gradle.kts ---

--- 文件: D:\code\compose-webview-multiplatform\sample\androidApp\build.gradle.kts ---
--- 大小: 995.00 B | 修改时间: Thu Jun 05 00:47:23 CST 2025 ---

plugins {
    alias(libs.plugins.kotlin.multiplatform)
    alias(libs.plugins.android.application)
    alias(libs.plugins.compose.multiplatorm)
}

kotlin {
    androidTarget()
    sourceSets {
        androidMain.dependencies {
            implementation(project(":sample:shared"))
        }
    }
}

android {
    compileSdk = (findProperty("android.compileSdk") as String).toInt()
    namespace = "com.multiplatform.webview"

    sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")

    defaultConfig {
        applicationId = "com.multiplatform.webview"
        minSdk = (findProperty("android.minSdk") as String).toInt()
        targetSdk = (findProperty("android.targetSdk") as String).toInt()
        versionCode = 1
        versionName = "1.0"
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain(17)
    }
}

--- 文件结束: build.gradle.kts ---

--- 文件: D:\code\compose-webview-multiplatform\sample\androidApp\src\androidMain\AndroidManifest.xml ---
--- 大小: 1.10 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:usesCleartextTraffic="true"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat.Light.NoActionBar">
        <activity
            android:exported="true"
            android:configChanges="orientation|screenSize|screenLayout|keyboardHidden|mnc|colorMode|density|fontScale|fontWeightAdjustment|keyboard|layoutDirection|locale|mcc|navigation|smallestScreenSize|touchscreen|uiMode"
            android:name=".MainActivity"
        >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

--- 文件结束: AndroidManifest.xml ---

--- 文件: D:\code\compose-webview-multiplatform\sample\androidApp\src\androidMain\kotlin\com\multiplatform\webview\MainActivity.kt ---
--- 大小: 418.00 B | 修改时间: Thu Jun 05 01:08:32 CST 2025 ---

package com.multiplatform.webview

import android.os.Bundle
import androidx.activity.compose.setContent
import androidx.appcompat.app.AppCompatActivity
import com.kevinnzou.sample.MainWebView

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContent {
            MainWebView()
        }
    }
}

--- 文件结束: MainActivity.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\desktopApp\build.gradle.kts ---
--- 大小: 1.65 KB | 修改时间: Fri Jun 06 18:32:12 CST 2025 ---

import org.jetbrains.compose.desktop.application.dsl.TargetFormat

plugins {
    alias(libs.plugins.kotlin.multiplatform)
    alias(libs.plugins.compose.multiplatorm)
}

kotlin {
    jvm{
        jvmToolchain(17)
    }
    sourceSets {
        val jvmMain by getting
        jvmMain.dependencies {
            implementation("androidx.collection:collection:1.5.0-alpha05") // 或 1.4.0 稳定版
            implementation(compose.desktop.currentOs)
            implementation(project(":sample:shared"))
            implementation("org.jogamp.gluegen:gluegen-rt:2.5.0")
            implementation("org.jogamp.jogl:jogl-all:2.5.0")
        }
    }
}

compose.desktop {
    application {
        mainClass = "MainKt"

        nativeDistributions {
            // dmg mac, msi win, deb debian
            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)
            packageName = "KotlinMultiplatformComposeDesktopApplication"
            packageVersion = "1.0.0"
            includeAllModules = true
        }
        buildTypes.release.proguard {
            configurationFiles.from("compose-desktop.pro")
        }
    }
}

afterEvaluate {
    tasks.withType<JavaExec> {
        jvmArgs("--add-opens", "java.desktop/sun.awt=ALL-UNNAMED")
        jvmArgs("--add-opens", "java.desktop/java.awt.peer=ALL-UNNAMED")

        if (System.getProperty("os.name").contains("Mac")) {
            jvmArgs("--add-opens", "java.desktop/sun.awt=ALL-UNNAMED")
            jvmArgs("--add-opens", "java.desktop/sun.lwawt=ALL-UNNAMED")
            jvmArgs("--add-opens", "java.desktop/sun.lwawt.macosx=ALL-UNNAMED")
        }
    }
}

--- 文件结束: build.gradle.kts ---

--- 文件: D:\code\compose-webview-multiplatform\sample\desktopApp\src\jvmMain\kotlin\main.kt ---
--- 大小: 2.35 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

import androidx.compose.material.Text
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.window.Window
import androidx.compose.ui.window.application
import com.kevinnzou.sample.MainWebView
import dev.datlag.kcef.KCEF
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File

fun main() =
    application {
        Window(onCloseRequest = ::exitApplication) {
            var restartRequired by remember { mutableStateOf(false) }
            var downloading by remember { mutableStateOf(0F) }
            var initialized by remember { mutableStateOf(false) }

            LaunchedEffect(Unit) {
                withContext(Dispatchers.IO) {
                    KCEF.init(builder = {
                        installDir(File("kcef-bundle"))
                        progress {
                            onDownloading {
                                downloading = it
                            }
                            onInitialized {
                                initialized = true
                            }
                        }
                        download {
                            github {
                                release("jbr-release-17.0.12b1207.37")
                            }
                        }

                        settings {
                            cachePath = File("cache").absolutePath
                        }
                    }, onError = {
                        it?.printStackTrace()
                    }, onRestartRequired = {
                        restartRequired = true
                    })
                }
            }

            if (restartRequired) {
                Text(text = "Restart required.")
            } else {
                if (initialized) {
                    MainWebView()
                } else {
                    Text(text = "Downloading $downloading%")
                }
            }

            DisposableEffect(Unit) {
                onDispose {
                    KCEF.disposeBlocking()
                }
            }
        }
    }

--- 文件结束: main.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\build.gradle.kts ---
--- 大小: 2.35 KB | 修改时间: Thu Jun 05 01:05:15 CST 2025 ---

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.compose.multiplatorm)
    alias(libs.plugins.kotlin.atomicfu)
    alias(libs.plugins.kotlin.multiplatform)
    alias(libs.plugins.kotlin.serialization)
}

@OptIn(org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi::class)
kotlin {
    targetHierarchy.default()

    androidTarget {
        compilations.all {
            kotlinOptions {
                jvmTarget = "17"
            }
        }
    }

    jvm("desktop")

    listOf(
        iosX64(),
        iosArm64(),
        iosSimulatorArm64(),
    ).forEach {
        it.binaries.framework {
            baseName = "shared"
        }
    }

    sourceSets {

        commonMain.dependencies {
            implementation(compose.runtime)
            implementation(compose.foundation)
            implementation(compose.material)
            implementation(compose.components.resources)
            implementation(libs.compose.navigation)
            implementation(libs.kermit)
            implementation(libs.kotlin.serialization.json)
            implementation(libs.kotlin.atomicfu)
            implementation(libs.kotlin.coroutines.core)
            implementation(libs.voyager.navigator)
            implementation(libs.voyager.tabNavigator)

            api(project(":webview"))
        }

        commonTest.dependencies {
            implementation(libs.kotlin.test)
        }

        androidMain.dependencies {
            api(libs.android.activity.compose)
            api(libs.android.appcompat)
            implementation(libs.kotlin.coroutines.android)
        }

        val desktopMain by getting
        desktopMain.dependencies {
            implementation(compose.desktop.common)
            implementation(libs.kotlin.coroutines.swing)
        }
    }
}

android {
    namespace = "com.kevinnzou.sample"
    compileSdk = 34

    sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
    sourceSets["main"].res.srcDirs("src/androidMain/res")
    sourceSets["main"].resources.srcDirs("src/commonMain/resources")

    defaultConfig {
        minSdk = 21
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain(17)
    }
}

--- 文件结束: build.gradle.kts ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\androidMain\kotlin\com\kevinnzou\sample\FileChooseWebViewSample.android.kt ---
--- 大小: 4.29 KB | 修改时间: Fri Jun 06 19:33:40 CST 2025 ---

package com.kevinnzou.sample

import android.app.Activity
import android.content.ActivityNotFoundException
import android.content.Intent
import android.net.Uri
import android.webkit.ValueCallback
import android.webkit.WebView
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.ActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import com.multiplatform.webview.web.AccompanistWebChromeClient
import com.multiplatform.webview.web.PlatformWebViewParams

@Composable
actual fun getPlatformWebViewParams(): PlatformWebViewParams? {
    var fileChooserIntent by remember { mutableStateOf<Intent?>(null) }

    // similar static var but bind with different special instance
    val webViewChromeClient =
        remember {
            FileChoosableWebChromeClient(onShowFilePicker = { fileChooserIntent = it })
        }

    val launcher =
        rememberLauncherForActivityResult(
            contract = ActivityResultContracts.StartActivityForResult(),
        ) { result: ActivityResult ->
            if (result.resultCode != Activity.RESULT_OK) {
                Toast.makeText(
                    webViewChromeClient.context,
                    "resultCode is not RESULT_OK (value: ${result.resultCode})",
                    Toast.LENGTH_SHORT,
                ).show()
                webViewChromeClient.cancelFileChooser()
                return@rememberLauncherForActivityResult
            }

            val intent = result.data
            if (intent == null) {
                Toast.makeText(
                    webViewChromeClient.context,
                    "result intent is null",
                    Toast.LENGTH_SHORT,
                ).show()
                webViewChromeClient.cancelFileChooser()
                return@rememberLauncherForActivityResult
            }

            val singleFile: Uri? = intent.data
            val multiFiles: List<Uri>? = intent.getUris()

            when {
                singleFile != null -> webViewChromeClient.onReceiveFiles(arrayOf(singleFile))
                multiFiles != null -> webViewChromeClient.onReceiveFiles(multiFiles.toTypedArray())
                else -> {
                    Toast.makeText(
                        webViewChromeClient.context,
                        "data and clipData is null",
                        Toast.LENGTH_SHORT,
                    ).show()
                    webViewChromeClient.cancelFileChooser()
                }
            }
        }

    LaunchedEffect(key1 = fileChooserIntent) {
        if (fileChooserIntent != null) {
            try {
                launcher.launch(fileChooserIntent)
            } catch (e: ActivityNotFoundException) {
                webViewChromeClient.cancelFileChooser()
            }
        }
    }

    return PlatformWebViewParams(chromeClient = webViewChromeClient)
}

private fun Intent.getUris(): List<Uri>? {
    val clipData = clipData ?: return null
    return (0 until clipData.itemCount).map { clipData.getItemAt(it).uri }
}

private class FileChoosableWebChromeClient(
    private val onShowFilePicker: (Intent) -> Unit,
) : AccompanistWebChromeClient() {
    private var filePathCallback: ValueCallback<Array<Uri>>? = null

    override fun onShowFileChooser(
        webView: WebView?,
        filePathCallback: ValueCallback<Array<Uri>>?,
        fileChooserParams: FileChooserParams?,
    ): Boolean {
        this.filePathCallback = filePathCallback
        val filePickerIntent = fileChooserParams?.createIntent()

        if (filePickerIntent == null) {
            cancelFileChooser()
        } else {
            onShowFilePicker(filePickerIntent)
        }
        return true
    }

    fun onReceiveFiles(uris: Array<Uri>) {
        filePathCallback?.onReceiveValue(uris)
        filePathCallback = null
    }

    fun cancelFileChooser() {
        filePathCallback?.onReceiveValue(null)
        filePathCallback = null
    }
}

--- 文件结束: FileChooseWebViewSample.android.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\androidMain\kotlin\com\kevinnzou\sample\main.android.kt ---
--- 大小: 177.00 B | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.runtime.Composable

actual fun getPlatformName(): String = "Android"

@Composable
fun MainWebView() = WebViewApp()

--- 文件结束: main.android.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\BasicWebViewSample.kt ---
--- 大小: 6.14 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material.Button
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.LinearProgressIndicator
import androidx.compose.material.MaterialTheme
import androidx.compose.material.OutlinedTextField
import androidx.compose.material.Text
import androidx.compose.material.TopAppBar
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Close
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.runtime.snapshotFlow
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import co.touchlab.kermit.Logger
import com.multiplatform.webview.cookie.Cookie
import com.multiplatform.webview.util.KLogSeverity
import com.multiplatform.webview.web.LoadingState
import com.multiplatform.webview.web.WebView
import com.multiplatform.webview.web.WebViewState
import com.multiplatform.webview.web.rememberWebViewNavigator
import com.multiplatform.webview.web.rememberWebViewState
import kotlinx.coroutines.flow.filter

/**
 * Created By Kevin Zou On 2023/9/8
 *
 * Basic Sample of WebView
 *
 * Note: Developers targeting the Desktop platform should refer to
 * [README.desktop.md](https://github.com/KevinnZou/compose-webview-multiplatform/blob/main/README.desktop.md)
 * for setup instructions first.
 */
@Composable
internal fun BasicWebViewSample(navHostController: NavHostController? = null) {
    val initialUrl = "https://github.com/KevinnZou/compose-webview-multiplatform"
    val state =
        rememberWebViewState(url = initialUrl) {
            logSeverity = KLogSeverity.Debug
            customUserAgentString =
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1) AppleWebKit/625.20 (KHTML, like Gecko) Version/14.3.43 Safari/625.20"
            iOSWebSettings.isInspectable = true
        }
    val navigator = rememberWebViewNavigator()
    var textFieldValue by remember(state.lastLoadedUrl) {
        mutableStateOf(state.lastLoadedUrl)
    }
    MaterialTheme {
        Column {
            TopAppBar(
                title = { Text(text = "WebView Sample") },
                navigationIcon = {
                    IconButton(onClick = {
                        if (navigator.canGoBack) {
                            navigator.navigateBack()
                        } else {
                            navHostController?.popBackStack()
                        }
                    }) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Back",
                        )
                    }
                },
            )

            Row {
                Box(modifier = Modifier.weight(1f)) {
                    if (state.errorsForCurrentRequest.isNotEmpty()) {
                        Image(
                            imageVector = Icons.Default.Close,
                            contentDescription = "Error",
                            colorFilter = ColorFilter.tint(Color.Red),
                            modifier =
                                Modifier
                                    .align(Alignment.CenterEnd)
                                    .padding(8.dp),
                        )
                    }

                    OutlinedTextField(
                        value = textFieldValue ?: "",
                        onValueChange = { textFieldValue = it },
                        modifier = Modifier.fillMaxWidth(),
                    )
                }

                Button(
                    onClick = {
                        textFieldValue?.let {
                            navigator.loadUrl(it)
                        }
                    },
                    modifier = Modifier.align(Alignment.CenterVertically),
                ) {
                    Text("Go")
                }
            }

            val loadingState = state.loadingState
            if (loadingState is LoadingState.Loading) {
                LinearProgressIndicator(
                    progress = loadingState.progress,
                    modifier = Modifier.fillMaxWidth(),
                )
            }

            WebView(
                state = state,
                modifier =
                    Modifier
                        .fillMaxSize(),
                navigator = navigator,
            )
        }
    }
}

@Composable
internal fun CookieSample(state: WebViewState) {
    LaunchedEffect(state) {
        snapshotFlow { state.loadingState }
            .filter { it is LoadingState.Finished }
            .collect {
                state.cookieManager.setCookie(
                    "https://github.com",
                    Cookie(
                        name = "test",
                        value = "value",
                        domain = "github.com",
                        expiresDate = 1896863778,
                    ),
                )
                Logger.i {
                    "cookie: ${state.cookieManager.getCookies("https://github.com")}"
                }
                state.cookieManager.removeAllCookies()
                Logger.i {
                    "cookie: ${state.cookieManager.getCookies("https://github.com")}"
                }
            }
    }
}

--- 文件结束: BasicWebViewSample.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\DRMVideoSample.kt ---
--- 大小: 2.56 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.material.TopAppBar
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.ui.Modifier
import androidx.navigation.NavHostController
import com.multiplatform.webview.util.KLogSeverity
import com.multiplatform.webview.web.WebView
import com.multiplatform.webview.web.rememberWebViewNavigator
import com.multiplatform.webview.web.rememberWebViewState

/**
 * Created By Adam Kobor on 2024/9/9
 *
 * Sample for DRM protected video handling in WebView.
 * `allowProtectedMedia` is set to true in the WebView settings, so EME APIs can be used to play DRM
 * protected content.
 */
@Composable
internal fun DRMVideoSample(navHostController: NavHostController? = null) {
    val url = "https://bitmovin.com/demos/drm/"
    val state = rememberWebViewState(url = url)
    DisposableEffect(Unit) {
        state.webSettings.apply {
            logSeverity = KLogSeverity.Debug
            customUserAgentString =
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1) AppleWebKit/625.20 (KHTML, like Gecko) Version/14.3.43 Safari/625.20"
            androidWebSettings.allowProtectedMedia = true
        }

        onDispose { }
    }
    val navigator = rememberWebViewNavigator()

    MaterialTheme {
        Column {
            TopAppBar(
                title = { Text(text = "DRM Video Sample") },
                navigationIcon = {
                    IconButton(onClick = {
                        if (navigator.canGoBack) {
                            navigator.navigateBack()
                        } else {
                            navHostController?.popBackStack()
                        }
                    }) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Back",
                        )
                    }
                },
            )

            WebView(
                state = state,
                modifier = Modifier.fillMaxSize(),
                navigator = navigator,
            )
        }
    }
}

--- 文件结束: DRMVideoSample.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\FileChooseWebViewSample.kt ---
--- 大小: 2.60 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.material.TopAppBar
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Modifier
import androidx.navigation.NavHostController
import com.multiplatform.webview.util.KLogSeverity
import com.multiplatform.webview.web.PlatformWebViewParams
import com.multiplatform.webview.web.WebView
import com.multiplatform.webview.web.rememberWebViewNavigator
import com.multiplatform.webview.web.rememberWebViewStateWithHTMLFile

/**
 * Created By briandr97 2024/8/8
 *
 * Basic Sample for choose file in webview
 */
@Composable
internal fun FileChooseWebViewSample(navHostController: NavHostController? = null) {
    val webViewState = rememberWebViewStateWithHTMLFile(fileName = "fileChoose.html")
    val webViewNavigator = rememberWebViewNavigator()
    LaunchedEffect(Unit) {
        webViewState.webSettings.apply {
            zoomLevel = 1.0
            logSeverity = KLogSeverity.Debug
            androidWebSettings.apply {
                isAlgorithmicDarkeningAllowed = true
                safeBrowsingEnabled = true
                allowFileAccess = false
            }
        }
    }
    MaterialTheme {
        Column {
            TopAppBar(
                title = { Text(text = "Html Sample") },
                navigationIcon = {
                    IconButton(onClick = {
                        navHostController?.popBackStack()
                    }) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Back",
                        )
                    }
                },
            )

            Box(Modifier.fillMaxSize()) {
                WebView(
                    state = webViewState,
                    modifier = Modifier.fillMaxSize(),
                    captureBackPresses = false,
                    navigator = webViewNavigator,
                    platformWebViewParams = getPlatformWebViewParams(),
                )
            }
        }
    }
}

@Composable
expect fun getPlatformWebViewParams(): PlatformWebViewParams?

--- 文件结束: FileChooseWebViewSample.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\HtmlWebViewSample.kt ---
--- 大小: 5.24 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.Button
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.material.TopAppBar
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import co.touchlab.kermit.Logger
import com.kevinnzou.sample.eventbus.FlowEventBus
import com.kevinnzou.sample.eventbus.NavigationEvent
import com.kevinnzou.sample.jsbridge.GreetJsMessageHandler
import com.kevinnzou.sample.res.HtmlRes
import com.multiplatform.webview.jsbridge.WebViewJsBridge
import com.multiplatform.webview.jsbridge.rememberWebViewJsBridge
import com.multiplatform.webview.util.KLogSeverity
import com.multiplatform.webview.web.WebView
import com.multiplatform.webview.web.WebViewState
import com.multiplatform.webview.web.rememberWebViewNavigator
import com.multiplatform.webview.web.rememberWebViewStateWithHTMLFile
import kotlinx.coroutines.flow.filter

/**
 * Created By Kevin Zou On 2023/9/8
 *
 * Basic Sample for loading Html in WebView
 *
 * Note: Developers targeting the Desktop platform should refer to
 * [README.desktop.md](https://github.com/KevinnZou/compose-webview-multiplatform/blob/main/README.desktop.md)
 * for setup instructions first.
 */
@Composable
internal fun BasicWebViewWithHTMLSample(navHostController: NavHostController? = null) {
    val html = HtmlRes.html
    val webViewState =
        rememberWebViewStateWithHTMLFile(
            fileName = "index.html",
        )
//    val webViewState = rememberWebViewStateWithHTMLData(html)
    val webViewNavigator = rememberWebViewNavigator()
    val jsBridge = rememberWebViewJsBridge(webViewNavigator)
    var jsRes by mutableStateOf("Evaluate JavaScript")
    LaunchedEffect(Unit) {
        initWebView(webViewState)
        initJsBridge(jsBridge)
    }
    MaterialTheme {
        Column {
            TopAppBar(
                title = { Text(text = "Html Sample") },
                navigationIcon = {
                    IconButton(onClick = {
                        navHostController?.popBackStack()
                    }) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Back",
                        )
                    }
                },
            )

            Box(Modifier.fillMaxSize()) {
                WebView(
                    state = webViewState,
                    modifier = Modifier.fillMaxSize(),
                    captureBackPresses = false,
                    navigator = webViewNavigator,
                    webViewJsBridge = jsBridge,
                )
                Button(
                    onClick = {
                        webViewNavigator.evaluateJavaScript(
                            """
                            document.getElementById("subtitle").innerText = "Hello from KMM!";
                            window.kmpJsBridge.callNative("Greet",JSON.stringify({message: "Hello"}),
                                function (data) {
                                    document.getElementById("subtitle").innerText = data;
                                    console.log("Greet from Native: " + data);
                                }
                            );
                            callJS();
                            """.trimIndent(),
                        ) {
                            jsRes = it
                        }
                    },
                    modifier = Modifier.align(Alignment.BottomCenter).padding(bottom = 50.dp),
                ) {
                    Text(jsRes)
                }
            }
        }
    }
}

fun initWebView(webViewState: WebViewState) {
    webViewState.webSettings.apply {
        zoomLevel = 1.0
        isJavaScriptEnabled = true
        logSeverity = KLogSeverity.Debug
        allowFileAccessFromFileURLs = true
        allowUniversalAccessFromFileURLs = true
        androidWebSettings.apply {
            isAlgorithmicDarkeningAllowed = true
            safeBrowsingEnabled = true
            allowFileAccess = true
        }
    }
}

suspend fun initJsBridge(webViewJsBridge: WebViewJsBridge) {
    webViewJsBridge.register(GreetJsMessageHandler())
    //        EventBus.observe<NavigationEvent> {
//            Logger.d {
//                "Received NavigationEvent"
//            }
//        }
    FlowEventBus.events.filter { it is NavigationEvent }.collect {
        Logger.d {
            "Received NavigationEvent"
        }
    }
}

--- 文件结束: HtmlWebViewSample.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\InterceptRequestSample.kt ---
--- 大小: 6.75 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material.Button
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.LinearProgressIndicator
import androidx.compose.material.MaterialTheme
import androidx.compose.material.OutlinedTextField
import androidx.compose.material.Text
import androidx.compose.material.TopAppBar
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Close
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import co.touchlab.kermit.Logger
import com.multiplatform.webview.request.RequestInterceptor
import com.multiplatform.webview.request.WebRequest
import com.multiplatform.webview.request.WebRequestInterceptResult
import com.multiplatform.webview.util.KLogSeverity
import com.multiplatform.webview.web.LoadingState
import com.multiplatform.webview.web.WebView
import com.multiplatform.webview.web.WebViewNavigator
import com.multiplatform.webview.web.rememberWebViewNavigator
import com.multiplatform.webview.web.rememberWebViewState

/**
 * Created By Kevin Zou On 2023/9/8
 *
 * Sample for intercepting requests in WebView
 *
 * Note: Developers targeting the Desktop platform should refer to
 * [README.desktop.md](https://github.com/KevinnZou/compose-webview-multiplatform/blob/main/README.desktop.md)
 * for setup instructions first.
 */
@Composable
internal fun InterceptRequestSample(navHostController: NavHostController? = null) {
    val initialUrl = "https://www.bing.com/search?q=Android"
    val state = rememberWebViewState(url = initialUrl)
    DisposableEffect(Unit) {
        state.webSettings.apply {
            logSeverity = KLogSeverity.Debug
            customUserAgentString =
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1) AppleWebKit/625.20 (KHTML, like Gecko) Version/14.3.43 Safari/625.20"
        }

        onDispose { }
    }
    val navigator =
        rememberWebViewNavigator(
            requestInterceptor =
                object : RequestInterceptor {
                    override fun onInterceptUrlRequest(
                        request: WebRequest,
                        navigator: WebViewNavigator,
                    ): WebRequestInterceptResult {
                        request.let {
                            Logger.i { "Sample onInterceptRequest: $it" }
                        }
                        return if (request.url.contains("kotlin")) {
                            WebRequestInterceptResult.Modify(
                                WebRequest(
                                    url = "https://kotlinlang.org/docs/multiplatform.html",
                                    headers = mutableMapOf("info" to "test"),
                                ),
                            )
                        } else {
                            WebRequestInterceptResult.Allow
                        }
                    }
                },
        )
    var textFieldValue by remember(state.lastLoadedUrl) {
        mutableStateOf(state.lastLoadedUrl)
    }
    MaterialTheme {
        Column {
            TopAppBar(
                title = { Text(text = "Intercept Request Sample") },
                navigationIcon = {
                    IconButton(onClick = {
                        if (navigator.canGoBack) {
                            navigator.navigateBack()
                        } else {
                            navHostController?.popBackStack()
                        }
                    }) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Back",
                        )
                    }
                },
            )

            @Suppress("ktlint:standard:max-line-length")
            Text(
                text =
                    "This sample demonstrates how to intercept requests in WebView. " +
                        "When the URL contains 'kotlin', the request will be redirected to 'https://kotlinlang.org/docs/multiplatform.html'.",
                modifier = Modifier.padding(8.dp),
            )

            Row {
                Box(modifier = Modifier.weight(1f)) {
                    if (state.errorsForCurrentRequest.isNotEmpty()) {
                        Image(
                            imageVector = Icons.Default.Close,
                            contentDescription = "Error",
                            colorFilter = ColorFilter.tint(Color.Red),
                            modifier =
                                Modifier
                                    .align(Alignment.CenterEnd)
                                    .padding(8.dp),
                        )
                    }

                    OutlinedTextField(
                        value = textFieldValue ?: "",
                        onValueChange = { textFieldValue = it },
                        modifier = Modifier.fillMaxWidth(),
                    )
                }

                Button(
                    onClick = {
                        textFieldValue?.let {
                            navigator.loadUrl(it)
                        }
                    },
                    modifier = Modifier.align(Alignment.CenterVertically),
                ) {
                    Text("Go")
                }
            }

            val loadingState = state.loadingState
            if (loadingState is LoadingState.Loading) {
                LinearProgressIndicator(
                    progress = loadingState.progress,
                    modifier = Modifier.fillMaxWidth(),
                )
            }

            WebView(
                state = state,
                modifier =
                    Modifier
                        .fillMaxSize(),
                navigator = navigator,
            )
        }
    }
}

--- 文件结束: InterceptRequestSample.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\KeepStateWebview.kt ---
--- 大小: 2.27 KB | 修改时间: Fri Jun 06 20:15:54 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.foundation.layout.RowScope
import androidx.compose.material.BottomNavigation
import androidx.compose.material.BottomNavigationItem
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.Scaffold
import androidx.compose.material.Text
import androidx.compose.material.TopAppBar
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import cafe.adriel.voyager.navigator.tab.CurrentTab
import cafe.adriel.voyager.navigator.tab.LocalTabNavigator
import cafe.adriel.voyager.navigator.tab.Tab
import cafe.adriel.voyager.navigator.tab.TabNavigator
import com.kevinnzou.sample.navigation.HomeTab
import com.kevinnzou.sample.navigation.PersonalTab

/**
 * Created By Kevin Zou On 2023/12/8
 */
@Composable
fun KeepStateWebview(navHostController: NavHostController? = null) {
    TabNavigator(HomeTab) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = { Text(text = "SaveState Sample") },
                    navigationIcon = {
                        IconButton(onClick = {
                            navHostController?.popBackStack()
                        }) {
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Back",
                            )
                        }
                    },
                )
            },
            content = {
                CurrentTab()
            },
            bottomBar = {
                BottomNavigation {
                    TabNavigationItem(HomeTab)
                    TabNavigationItem(PersonalTab)
                }
            },
        )
    }
}

@Composable
private fun RowScope.TabNavigationItem(tab: Tab) {
    val tabNavigator = LocalTabNavigator.current

    BottomNavigationItem(
        selected = tabNavigator.current.key == tab.key,
        onClick = { tabNavigator.current = tab },
        icon = { Icon(painter = tab.options.icon!!, contentDescription = tab.options.title) },
    )
}

--- 文件结束: KeepStateWebview.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\MidiSample.kt ---
--- 大小: 2.55 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.material.TopAppBar
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.ui.Modifier
import androidx.navigation.NavHostController
import com.multiplatform.webview.util.KLogSeverity
import com.multiplatform.webview.web.WebView
import com.multiplatform.webview.web.rememberWebViewNavigator
import com.multiplatform.webview.web.rememberWebViewState

/**
 * Created By Adam Kobor On 2024/9/9
 *
 * Sample for MIDI SysEx handling in WebView.
 * `allowMidiSysexMessages` is set to true in the WebView settings, so MIDI SysEx messages can be
 * sent and received.
 */
@Composable
internal fun MidiSample(navHostController: NavHostController? = null) {
    val url = "https://versioduo.com/webmidi-test/"
    val state = rememberWebViewState(url = url)
    DisposableEffect(Unit) {
        state.webSettings.apply {
            logSeverity = KLogSeverity.Debug
            customUserAgentString =
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1) AppleWebKit/625.20 (KHTML, like Gecko) Version/14.3.43 Safari/625.20"
            androidWebSettings.allowMidiSysexMessages = true
        }

        onDispose { }
    }
    val navigator = rememberWebViewNavigator()

    MaterialTheme {
        Column {
            TopAppBar(
                title = { Text(text = "Midi SysEx Sample") },
                navigationIcon = {
                    IconButton(onClick = {
                        if (navigator.canGoBack) {
                            navigator.navigateBack()
                        } else {
                            navHostController?.popBackStack()
                        }
                    }) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Back",
                        )
                    }
                },
            )

            WebView(
                state = state,
                modifier = Modifier.fillMaxSize(),
                navigator = navigator,
            )
        }
    }
}

--- 文件结束: MidiSample.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\WebViewApp.kt ---
--- 大小: 4.05 KB | 修改时间: Fri Jun 06 20:16:10 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.animation.EnterTransition
import androidx.compose.animation.ExitTransition
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.material.Button
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.multiplatform.webview.web.WebView
import com.multiplatform.webview.web.rememberWebViewState

@Composable
internal fun WebViewApp() {
    val controller = rememberNavController()
    NavHost(
        navController = controller,
        startDestination = "main",
        enterTransition = {
            EnterTransition.None
        },
        exitTransition = {
            ExitTransition.None
        },
    ) {
        composable("main") {
            MainScreen(controller)
        }
        composable("basic") {
            BasicWebViewSample(controller)
        }
        composable("html") {
            BasicWebViewWithHTMLSample(controller)
        }
        composable("tab") {
            KeepStateWebview(controller)
        }
        composable("intercept") {
            InterceptRequestSample(controller)
        }
        composable("file") {
            FileChooseWebViewSample(controller)
        }
    }
}

@Composable
fun MainScreen(controller: NavController) {
    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center,
    ) {
//        Button(onClick = {
//            controller.navigate("basic")
//        }) {
//            Text("Basic Sample", fontSize = 18.sp)
//        }
//        Spacer(modifier = Modifier.height(20.dp))
//        Button(onClick = {
//            controller.navigate("html")
//        }) {
//            Text("HTML Sample", fontSize = 18.sp)
//        }
//        Spacer(modifier = Modifier.height(20.dp))
        Button(onClick = {
            controller.navigate("tab")
        }) {
            Text("SaveState Sample", fontSize = 18.sp)
        }
        Spacer(modifier = Modifier.height(20.dp))
        Button(onClick = {
            controller.navigate("intercept")
        }) {
            Text("Intercept Request Sample", fontSize = 18.sp)
        }
//        Spacer(modifier = Modifier.height(20.dp))
//        Button(onClick = {
//            controller.navigate("file")
//        }) {
//            Text("File Choose Sample", fontSize = 18.sp)
//        }
    }
}

@Composable
internal fun WebViewSample() {
    MaterialTheme {
        val webViewState =
            rememberWebViewState("https://github.com/KevinnZou/compose-webview-multiplatform")
        webViewState.webSettings.apply {
            isJavaScriptEnabled = true
            customUserAgentString =
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1) AppleWebKit/625.20 (KHTML, like Gecko) Version/14.3.43 Safari/625.20"
            androidWebSettings.apply {
                isAlgorithmicDarkeningAllowed = true
                safeBrowsingEnabled = true
            }
        }
        Column(Modifier.fillMaxSize()) {
            val text =
                webViewState.let {
                    "${it.pageTitle ?: ""} ${it.loadingState} ${it.lastLoadedUrl ?: ""}"
                }
            Text(text)
            WebView(
                state = webViewState,
                modifier = Modifier.fillMaxSize(),
            )
        }
    }
}

expect fun getPlatformName(): String

--- 文件结束: WebViewApp.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\eventbus\EventBus.kt ---
--- 大小: 1.48 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample.eventbus

import kotlinx.atomicfu.atomic
import kotlinx.atomicfu.getAndUpdate
import kotlin.reflect.KClass

/**
 * Created By Kevin Zou On 2023/12/15
 */

typealias Observer = (Any) -> Unit

object EventBus {
    private val observers = atomic(mutableMapOf<KClass<out Any>, List<Observer>>())

    fun <T : Any> observe(
        clazz: KClass<T>,
        obs: (T) -> Unit,
    ) {
        if (!observers.value.containsKey(clazz)) {
            observers.getAndUpdate { cur ->
                cur.toMutableMap().also { upd ->
                    upd[clazz] = listOf(obs as Observer)
                }
            }
        } else {
            observers.getAndUpdate { cur ->
                cur.toMutableMap().also { upd ->
                    upd[clazz] = upd[clazz]!! + listOf(obs as Observer)
                }
            }
        }
    }

    inline fun <reified T : Any> observe(noinline obs: (T) -> Unit) {
        observe(T::class, obs)
    }

    fun <T : Any> removeObserver(
        clazz: KClass<T>,
        obs: (T) -> Unit,
    ) {
        observers.getAndUpdate { cur ->
            cur.toMutableMap().also { upd ->
                upd.remove(clazz)
            }
        }
    }

    fun <T : Any> post(
        clazz: KClass<T>,
        event: T,
    ) {
        observers.value[clazz]?.forEach { it.invoke(event) }
    }

    inline fun <reified T : Any> post(event: T) {
        post(T::class, event)
    }
}

--- 文件结束: EventBus.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\eventbus\FlowEventBus.kt ---
--- 大小: 394.00 B | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample.eventbus

import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.asSharedFlow

/**
 * Created By Kevin Zou On 2023/12/16
 */
object FlowEventBus {
    private val mEvents = MutableSharedFlow<IEvent>()
    val events = mEvents.asSharedFlow()

    suspend fun publishEvent(event: IEvent) {
        mEvents.emit(event)
    }
}

--- 文件结束: FlowEventBus.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\eventbus\IEvent.kt ---
--- 大小: 108.00 B | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample.eventbus

/**
 * Created By Kevin Zou On 2023/12/16
 */
interface IEvent

--- 文件结束: IEvent.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\eventbus\NavigationEvent.kt ---
--- 大小: 122.00 B | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample.eventbus

/**
 * Created By Kevin Zou On 2023/12/15
 */
class NavigationEvent : IEvent

--- 文件结束: NavigationEvent.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\jsbridge\CustomWebViewJsBridge.kt ---
--- 大小: 266.00 B | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample.jsbridge

import com.multiplatform.webview.jsbridge.WebViewJsBridge

/**
 * Created By Kevin Zou On 2023/12/6
 */
class CustomWebViewJsBridge : WebViewJsBridge() {
    init {
        register(GreetJsMessageHandler())
    }
}

--- 文件结束: CustomWebViewJsBridge.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\jsbridge\GreetJsMessageHandler.kt ---
--- 大小: 1.24 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample.jsbridge

import co.touchlab.kermit.Logger
import com.kevinnzou.sample.eventbus.FlowEventBus
import com.kevinnzou.sample.eventbus.NavigationEvent
import com.kevinnzou.sample.model.GreetModel
import com.multiplatform.webview.jsbridge.IJsMessageHandler
import com.multiplatform.webview.jsbridge.JsMessage
import com.multiplatform.webview.jsbridge.dataToJsonString
import com.multiplatform.webview.jsbridge.processParams
import com.multiplatform.webview.web.WebViewNavigator
import kotlinx.coroutines.launch

/**
 * Created By Kevin Zou On 2023/12/6
 */
class GreetJsMessageHandler : IJsMessageHandler {
    override fun methodName(): String {
        return "Greet"
    }

    override fun handle(
        message: JsMessage,
        navigator: WebViewNavigator?,
        callback: (String) -> Unit,
    ) {
        Logger.i {
            "Greet Handler Get Message: $message"
        }
        val param = processParams<GreetModel>(message)
        val data = GreetModel("KMM Received ${param.message}")
        callback(dataToJsonString(data))
//        EventBus.post(NavigationEvent())
        navigator?.coroutineScope?.launch {
            FlowEventBus.publishEvent(NavigationEvent())
        }
    }
}

--- 文件结束: GreetJsMessageHandler.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\model\GreetModel.kt ---
--- 大小: 190.00 B | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample.model

import kotlinx.serialization.Serializable

/**
 * Created By Kevin Zou On 2023/12/6
 */
@Serializable
data class GreetModel(val message: String)

--- 文件结束: GreetModel.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\navigation\CustomNavigationSample.kt ---
--- 大小: 2.94 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample.navigation

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.BottomNavigation
import androidx.compose.material.BottomNavigationItem
import androidx.compose.material.Icon
import androidx.compose.material.Scaffold
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Person
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.saveable.rememberSaveableStateHolder
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.rememberVectorPainter

/**
 * Created By Kevin Zou On 2023/12/12
 */

@Composable
fun CustomNavigationSample() {
    CustomNavigationScreen()
}

@Composable
fun <T : Any> Navigation(
    currentScreen: T,
    modifier: Modifier = Modifier,
    content: @Composable (T) -> Unit,
) {
    // create SaveableStateHolder.
    val saveableStateHolder = rememberSaveableStateHolder()
    Box(modifier) {
        // Wrap the content representing the `currentScreen` inside `SaveableStateProvider`.
        // Here you can also add a screen switch animation like Crossfade where during the
        // animation multiple screens will be displayed at the same time.
        saveableStateHolder.SaveableStateProvider(currentScreen) {
            content(currentScreen)
        }
    }
}

@Composable
fun CustomNavigationScreen() {
    var screen by rememberSaveable { mutableStateOf("screen1") }
    Scaffold(
        content = {
            Navigation(screen, Modifier.fillMaxSize()) { currentScreen ->
                if (currentScreen == "screen1") {
                    Home()
                } else {
                    Personal()
                }
            }
        },
        bottomBar = {
            BottomNavigation {
                BottomNavigationItem(
                    selected = screen == "screen1",
                    onClick = { screen = "screen1" },
                    icon = {
                        Icon(
                            painter = rememberVectorPainter(Icons.Default.Home),
                            contentDescription = "Home",
                        )
                    },
                )
                BottomNavigationItem(
                    selected = screen == "screen2",
                    onClick = { screen = "screen2" },
                    icon = {
                        Icon(
                            painter = rememberVectorPainter(Icons.Default.Person),
                            contentDescription = "Personal",
                        )
                    },
                )
            }
        },
    )
}

--- 文件结束: CustomNavigationSample.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\navigation\HomeTab.kt ---
--- 大小: 2.01 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample.navigation

import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Home
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.rememberVectorPainter
import androidx.compose.ui.unit.dp
import cafe.adriel.voyager.navigator.tab.Tab
import cafe.adriel.voyager.navigator.tab.TabOptions
import com.multiplatform.webview.util.KLogSeverity
import com.multiplatform.webview.web.WebView
import com.multiplatform.webview.web.rememberSaveableWebViewState
import com.multiplatform.webview.web.rememberWebViewNavigator

/**
 * Created By Kevin Zou On 2023/12/8
 */
object HomeTab : Tab {
    @Composable
    override fun Content() {
        Home()
    }

    override val options: TabOptions
        @Composable
        get() {
            val title = "Home"
            val icon = rememberVectorPainter(Icons.Default.Home)

            return remember {
                TabOptions(
                    index = 0u,
                    title = title,
                    icon = icon,
                )
            }
        }
}

@Composable
fun Home() {
    val url = "https://www.jetbrains.com/lp/compose-multiplatform/"
    val webViewState =
        rememberSaveableWebViewState(url).apply {
            webSettings.logSeverity = KLogSeverity.Debug
        }

    val navigator = rememberWebViewNavigator()

    LaunchedEffect(navigator) {
        val bundle = webViewState.viewState
        if (bundle == null) {
            // This is the first time load, so load the home page.
            navigator.loadUrl(url)
        }
    }

    WebView(
        state = webViewState,
        modifier = Modifier.fillMaxSize().padding(bottom = 45.dp),
        navigator = navigator,
    )
}

--- 文件结束: HomeTab.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\commonMain\kotlin\com\kevinnzou\sample\navigation\PersonalTab.kt ---
--- 大小: 1.41 KB | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample.navigation

import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Person
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.rememberVectorPainter
import androidx.compose.ui.unit.dp
import cafe.adriel.voyager.navigator.tab.Tab
import cafe.adriel.voyager.navigator.tab.TabOptions
import com.multiplatform.webview.web.WebView
import com.multiplatform.webview.web.rememberWebViewState

/**
 * Created By Kevin Zou On 2023/12/8
 */
object PersonalTab : Tab {
    @Composable
    override fun Content() {
        Personal()
    }

    override val options: TabOptions
        @Composable
        get() {
            val title = "Personal"
            val icon = rememberVectorPainter(Icons.Default.Person)

            return remember {
                TabOptions(
                    index = 0u,
                    title = title,
                    icon = icon,
                )
            }
        }
}

@Composable
fun Personal() {
    val state = rememberWebViewState("https://www.jetbrains.com/lp/compose-multiplatform/")
    WebView(state = state, modifier = Modifier.fillMaxSize().padding(bottom = 45.dp))
}

--- 文件结束: PersonalTab.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\desktopMain\kotlin\com\kevinnzou\sample\FileChooseWebViewSample.desktop.kt ---
--- 大小: 221.00 B | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.runtime.Composable
import com.multiplatform.webview.web.PlatformWebViewParams

@Composable
actual fun getPlatformWebViewParams(): PlatformWebViewParams? = null

--- 文件结束: FileChooseWebViewSample.desktop.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\desktopMain\kotlin\com\kevinnzou\sample\main.desktop.kt ---
--- 大小: 303.00 B | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.desktop.ui.tooling.preview.Preview
import androidx.compose.runtime.Composable

actual fun getPlatformName(): String = "Desktop"

@Composable
fun MainWebView() = WebViewApp()

@Preview
@Composable
fun AppPreview() {
    WebViewApp()
}

--- 文件结束: main.desktop.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\iosMain\kotlin\com\kevinnzou\sample\FileChooseWebViewSample.ios.kt ---
--- 大小: 221.00 B | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.runtime.Composable
import com.multiplatform.webview.web.PlatformWebViewParams

@Composable
actual fun getPlatformWebViewParams(): PlatformWebViewParams? = null

--- 文件结束: FileChooseWebViewSample.ios.kt ---

--- 文件: D:\code\compose-webview-multiplatform\sample\shared\src\iosMain\kotlin\com\kevinnzou\sample\main.ios.kt ---
--- 大小: 210.00 B | 修改时间: Wed Jun 04 07:12:18 CST 2025 ---

package com.kevinnzou.sample

import androidx.compose.ui.window.ComposeUIViewController

actual fun getPlatformName(): String = "iOS"

fun MainViewController() = ComposeUIViewController { WebViewApp() }

--- 文件结束: main.ios.kt ---

--- 文件: D:\code\compose-webview-multiplatform\settings.gradle.kts ---
--- 大小: 2.14 KB | 修改时间: Fri Jun 06 18:35:57 CST 2025 ---

rootProject.name = "compose-webview-multiplatform"
pluginManagement {
    repositories {
        maven { url = uri("https://maven.aliyun.com/repository/central") }
        maven { url = uri("https://maven.aliyun.com/repository/jcenter") }
        maven { url = uri("https://maven.aliyun.com/repository/google") }
        maven { url = uri("https://maven.aliyun.com/repository/gradle-plugin") }
        maven { url = uri("https://maven.aliyun.com/repository/public") }
        maven { url = uri("https://jitpack.io") }
        maven { url = uri("https://maven.aliyun.com/nexus/content/groups/public/") }
        maven { url = uri("https://maven.aliyun.com/nexus/content/repositories/jcenter") }
        maven {
            url = uri("https://mirrors.huaweicloud.com/repository/maven/")
        }
        maven {
            url = uri("https://maven.aliyun.com/repository/public/")
        }
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        gradlePluginPortal()
        google()
        mavenCentral()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        maven { url = uri("https://maven.aliyun.com/repository/central") }
        maven { url = uri("https://maven.aliyun.com/repository/jcenter") }
        maven { url = uri("https://maven.aliyun.com/repository/google") }
        maven { url = uri("https://maven.aliyun.com/repository/gradle-plugin") }
        maven { url = uri("https://maven.aliyun.com/repository/public") }
        maven { url = uri("https://jitpack.io") }
        maven {
            url = uri("https://mirrors.huaweicloud.com/repository/maven/")
        }
        maven {
            url = uri("https://maven.aliyun.com/repository/public/")
        }
        google()
        mavenCentral()
        maven("https://jogamp.org/deployment/maven/")
    }
}

include(":webview")
include(":sample:androidApp")
include(":sample:desktopApp")
include(":sample:shared")

--- 文件结束: settings.gradle.kts ---

--- 文件: D:\code\compose-webview-multiplatform\webview\build.gradle.kts ---
--- 大小: 2.71 KB | 修改时间: Thu Jun 05 00:47:19 CST 2025 ---

@file:Suppress("UNUSED_VARIABLE", "OPT_IN_USAGE")

plugins {
    alias(libs.plugins.kotlin.multiplatform)
    alias(libs.plugins.android.library)
    alias(libs.plugins.compose.multiplatorm)
    alias(libs.plugins.dokka)
    alias(libs.plugins.maven.publish)
    alias(libs.plugins.kotlin.serialization)
}

kotlin {
//    explicitApi = ExplicitApiMode.Strict

    targetHierarchy.default()

    androidTarget {
        publishLibraryVariants("release")
    }

    jvm("desktop")

    listOf(
        iosX64(),
        iosArm64(),
        iosSimulatorArm64(),
    ).forEach { iosTarget ->
        iosTarget.binaries.framework {
            baseName = "webview"
            isStatic = true
        }
        iosTarget.setUpiOSObserver()
    }

    sourceSets {
        commonMain.dependencies {
            implementation(compose.runtime)
            implementation(compose.foundation)
            implementation(compose.components.resources)
            implementation(libs.kermit)
            implementation(libs.kotlin.coroutines.core)
            implementation(libs.kotlin.serialization.json)
        }

        androidMain.dependencies {
            api(libs.android.activity.compose)
            api(libs.android.webkit)
            implementation(libs.kotlin.coroutines.android)
        }

        iosMain.dependencies { }

        val desktopMain by getting
        desktopMain.dependencies {
            implementation(compose.desktop.common)
            api(libs.kcef)
            implementation(libs.kotlin.coroutines.swing)
        }
    }
}

android {
    compileSdk = (findProperty("android.compileSdk") as String).toInt()
    namespace = "com.multiplatform.webview"

    sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
    sourceSets["main"].res.srcDirs("src/androidMain/res")
    sourceSets["main"].resources.srcDirs("src/commonMain/resources")

    defaultConfig {
        minSdk = (findProperty("android.minSdk") as String).toInt()
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain(17)
    }
}

fun org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget.setUpiOSObserver() {
    val path = projectDir.resolve("src/nativeInterop/cinterop/observer")

    binaries.all {
        linkerOpts("-F $path")
        linkerOpts("-ObjC")
    }

    compilations.getByName("main") {
        cinterops.create("observer") {
            compilerOpts("-F $path")
        }
    }
}

mavenPublishing {
    publishToMavenCentral(com.vanniktech.maven.publish.SonatypeHost.S01, automaticRelease = true)
    signAllPublications()
}

--- 文件结束: build.gradle.kts ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\androidMain\AndroidManifest.xml ---
--- 大小: 52.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

<?xml version="1.0" encoding="utf-8"?>
<manifest />
--- 文件结束: AndroidManifest.xml ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\androidMain\kotlin\com\multiplatform\webview\cookie\AndroidCookieManager.kt ---
--- 大小: 6.30 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.cookie

import androidx.webkit.CookieManagerCompat
import androidx.webkit.WebViewFeature
import com.multiplatform.webview.util.KLogger
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.TimeZone

/**
 * Android implementation of [CookieManager].
 */
object AndroidCookieManager : CookieManager {
    private val androidCookieManager = android.webkit.CookieManager.getInstance()

    override suspend fun setCookie(
        url: String,
        cookie: Cookie,
    ) {
        androidCookieManager.setCookie(url, cookie.toString())
    }

    override suspend fun getCookies(url: String): List<Cookie> {
        val cookieList = mutableListOf<Cookie>()

        var cookies: List<String> = ArrayList()

        if (WebViewFeature.isFeatureSupported(WebViewFeature.GET_COOKIE_INFO)) {
            cookies =
                CookieManagerCompat.getCookieInfo(
                    androidCookieManager, url,
                )
        } else {
            val cookiesString: String? = androidCookieManager.getCookie(url)
            if (!cookiesString.isNullOrBlank()) {
                cookies =
                    cookiesString.split("; ".toRegex())
                        .dropLastWhile { it.isEmpty() }
            }
        }

        for (cookie in cookies) {
            val cookieParams =
                cookie.split(";".toRegex())
                    .dropLastWhile { it.isEmpty() }

            if (cookieParams.isEmpty()) continue

            val nameValue = cookieParams[0].split("=".toRegex(), limit = 2).toTypedArray()
            val name = nameValue[0].trim { it <= ' ' }
            val value = if (nameValue.size > 1) nameValue[1].trim { it <= ' ' } else ""
            var cookieObj =
                Cookie(
                    name = name,
                    value = value,
                    domain = null,
                    path = null,
                    expiresDate = null,
                    isSessionOnly = false,
                    sameSite = null,
                    isSecure = null,
                    isHttpOnly = null,
                    maxAge = null,
                )

            if (WebViewFeature.isFeatureSupported(WebViewFeature.GET_COOKIE_INFO)) {
                cookieObj =
                    cookieObj.copy(
                        isSecure = false,
                        isHttpOnly = false,
                    )

                for (i in 1 until cookieParams.size) {
                    val cookieParamNameValue =
                        cookieParams[i].split("=".toRegex(), limit = 2).toTypedArray()
                    val cookieParamName = cookieParamNameValue[0].trim { it <= ' ' }
                    val cookieParamValue =
                        if (cookieParamNameValue.size > 1) cookieParamNameValue[1].trim { it <= ' ' } else ""

                    when {
                        cookieParamName.equals("Expires", ignoreCase = true) -> {
                            try {
                                val sdf = SimpleDateFormat("EEE, dd MMM yyyy hh:mm:ss z", Locale.US)
                                val expiryDate = sdf.parse(cookieParamValue)
                                if (expiryDate != null) {
                                    cookieObj =
                                        cookieObj.copy(
                                            expiresDate = expiryDate.time,
                                        )
                                }
                            } catch (e: ParseException) {
                                e.printStackTrace()
                            }
                        }

                        cookieParamName.equals("Max-Age", ignoreCase = true) -> {
                            try {
                                val maxAge = cookieParamValue.toLong()
                                cookieObj =
                                    cookieObj.copy(
                                        maxAge = maxAge,
                                        expiresDate = System.currentTimeMillis() + maxAge,
                                    )
                            } catch (e: NumberFormatException) {
                                e.printStackTrace()
                            }
                        }

                        cookieParamName.equals("Domain", ignoreCase = true) -> {
                            cookieObj = cookieObj.copy(domain = cookieParamValue)
                        }

                        cookieParamName.equals("SameSite", ignoreCase = true) -> {
                            runCatching { Cookie.HTTPCookieSameSitePolicy.valueOf(cookieParamValue) }
                                .onSuccess { cookieObj = cookieObj.copy(sameSite = it) }
                        }

                        cookieParamName.equals("Secure", ignoreCase = true) -> {
                            cookieObj = cookieObj.copy(isSecure = true)
                        }

                        cookieParamName.equals("HttpOnly", ignoreCase = true) -> {
                            cookieObj = cookieObj.copy(isHttpOnly = true)
                        }

                        cookieParamName.equals("Path", ignoreCase = true) -> {
                            cookieObj = cookieObj.copy(path = cookieParamValue)
                        }
                    }
                }
            }
            cookieList.add(cookieObj)
        }
        return cookieList
    }

    override suspend fun removeAllCookies() {
        androidCookieManager.removeAllCookies {
            KLogger.d {
                "AndroidCookieManager: removeAllCookies: $it"
            }
        }
        androidCookieManager.flush()
    }

    /**
     * Not supported on Android yet.
     */
    override suspend fun removeCookies(url: String) {
        // TODO
    }
}

actual fun getCookieExpirationDate(expiresDate: Long): String {
    val sdf =
        SimpleDateFormat("EEE, dd MMM yyyy hh:mm:ss z", Locale.US).apply {
            timeZone = TimeZone.getTimeZone("GMT")
        }
    return sdf.format(Date(expiresDate))
}

@Suppress("FunctionName") // Builder Function
actual fun WebViewCookieManager(): CookieManager = AndroidCookieManager

--- 文件结束: AndroidCookieManager.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\androidMain\kotlin\com\multiplatform\webview\util\getPlatform.kt ---
--- 大小: 562.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.util

import android.os.Build

internal actual fun getPlatform(): Platform {
    return Platform.Android
}

internal actual fun getPlatformVersion(): String {
    return Build.VERSION.RELEASE
}

internal actual fun getPlatformVersionDouble(): Double {
    val systemVersion = getPlatformVersion()
    val components = systemVersion.split(".")
    val major = components.getOrNull(0)?.toDoubleOrNull() ?: 0.0
    val minor = components.getOrNull(1)?.toDoubleOrNull() ?: 0.0
    return major + (minor / 10.0)
}

--- 文件结束: getPlatform.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\androidMain\kotlin\com\multiplatform\webview\web\AccompanistWebView.kt ---
--- 大小: 19.06 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import android.content.Context
import android.content.pm.PackageManager
import android.content.res.Configuration
import android.graphics.Bitmap
import android.os.Build
import android.view.ViewGroup
import android.webkit.PermissionRequest
import android.webkit.WebChromeClient
import android.webkit.WebResourceError
import android.webkit.WebResourceRequest
import android.webkit.WebView
import android.webkit.WebViewClient
import android.widget.FrameLayout
import androidx.activity.compose.BackHandler
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.viewinterop.AndroidView
import androidx.core.content.ContextCompat
import androidx.webkit.WebSettingsCompat
import androidx.webkit.WebViewFeature
import com.multiplatform.webview.jsbridge.WebViewJsBridge
import com.multiplatform.webview.request.WebRequest
import com.multiplatform.webview.request.WebRequestInterceptResult
import com.multiplatform.webview.util.KLogger

/**
 * Created By Kevin Zou On 2023/9/5
 */

/**
 * A wrapper around the Android View WebView to provide a basic WebView composable.
 *
 * If you require more customisation you are most likely better rolling your own and using this
 * wrapper as an example.
 *
 * The WebView attempts to set the layoutParams based on the Compose modifier passed in. If it
 * is incorrectly sizing, use the layoutParams composable function instead.
 *
 * @param state The webview state holder where the Uri to load is defined.
 * @param modifier A compose modifier
 * @param captureBackPresses Set to true to have this Composable capture back presses and navigate
 * the WebView back.
 * @param navigator An optional navigator object that can be used to control the WebView's
 * navigation from outside the composable.
 * @param onCreated Called when the WebView is first created, this can be used to set additional
 * settings on the WebView. WebChromeClient and WebViewClient should not be set here as they will be
 * subsequently overwritten after this lambda is called.
 * @param onDispose Called when the WebView is destroyed. Provides a bundle which can be saved
 * if you need to save and restore state in this WebView.
 * @param client Provides access to WebViewClient via subclassing
 * @param chromeClient Provides access to WebChromeClient via subclassing
 * @param factory An optional WebView factory for using a custom subclass of WebView
 * @sample com.google.accompanist.sample.webview.BasicWebViewSample
 */
@Composable
fun AccompanistWebView(
    state: WebViewState,
    modifier: Modifier = Modifier,
    captureBackPresses: Boolean = true,
    navigator: WebViewNavigator = rememberWebViewNavigator(),
    webViewJsBridge: WebViewJsBridge? = null,
    onCreated: (WebView) -> Unit = {},
    onDispose: (WebView) -> Unit = {},
    client: AccompanistWebViewClient = remember { AccompanistWebViewClient() },
    chromeClient: AccompanistWebChromeClient = remember { AccompanistWebChromeClient() },
    factory: ((Context) -> WebView)? = null,
) {
    BoxWithConstraints(modifier) {
        // WebView changes it's layout strategy based on
        // it's layoutParams. We convert from Compose Modifier to
        // layout params here.
        val width =
            if (constraints.hasFixedWidth) {
                ViewGroup.LayoutParams.MATCH_PARENT
            } else {
                ViewGroup.LayoutParams.WRAP_CONTENT
            }
        val height =
            if (constraints.hasFixedHeight) {
                ViewGroup.LayoutParams.MATCH_PARENT
            } else {
                ViewGroup.LayoutParams.WRAP_CONTENT
            }

        val layoutParams =
            FrameLayout.LayoutParams(
                width,
                height,
            )

        AccompanistWebView(
            state,
            layoutParams,
            Modifier,
            captureBackPresses,
            navigator,
            webViewJsBridge,
            onCreated,
            onDispose,
            client,
            chromeClient,
            factory,
        )
    }
}

/**
 * A wrapper around the Android View WebView to provide a basic WebView composable.
 *
 * If you require more customisation you are most likely better rolling your own and using this
 * wrapper as an example.
 *
 * The WebView attempts to set the layoutParams based on the Compose modifier passed in. If it
 * is incorrectly sizing, use the layoutParams composable function instead.
 *
 * @param state The webview state holder where the Uri to load is defined.
 * @param layoutParams A FrameLayout.LayoutParams object to custom size the underlying WebView.
 * @param modifier A compose modifier
 * @param captureBackPresses Set to true to have this Composable capture back presses and navigate
 * the WebView back.
 * @param navigator An optional navigator object that can be used to control the WebView's
 * navigation from outside the composable.
 * @param onCreated Called when the WebView is first created, this can be used to set additional
 * settings on the WebView. WebChromeClient and WebViewClient should not be set here as they will be
 * subsequently overwritten after this lambda is called.
 * @param onDispose Called when the WebView is destroyed. Provides a bundle which can be saved
 * if you need to save and restore state in this WebView.
 * @param client Provides access to WebViewClient via subclassing
 * @param chromeClient Provides access to WebChromeClient via subclassing
 * @param factory An optional WebView factory for using a custom subclass of WebView
 */
@Composable
fun AccompanistWebView(
    state: WebViewState,
    layoutParams: FrameLayout.LayoutParams,
    modifier: Modifier = Modifier,
    captureBackPresses: Boolean = true,
    navigator: WebViewNavigator = rememberWebViewNavigator(),
    webViewJsBridge: WebViewJsBridge? = null,
    onCreated: (WebView) -> Unit = {},
    onDispose: (WebView) -> Unit = {},
    client: AccompanistWebViewClient = remember { AccompanistWebViewClient() },
    chromeClient: AccompanistWebChromeClient = remember { AccompanistWebChromeClient() },
    factory: ((Context) -> WebView)? = null,
) {
    val webView = state.webView
    val scope = rememberCoroutineScope()

    BackHandler(captureBackPresses && navigator.canGoBack) {
        webView?.goBack()
    }

    // Set the state of the client and chrome client
    // This is done internally to ensure they always are the same instance as the
    // parent Web composable
    client.state = state
    client.navigator = navigator
    chromeClient.state = state

    AndroidView(
        factory = { context ->
            (factory?.invoke(context) ?: WebView(context)).apply {
                onCreated(this)

                this.layoutParams = layoutParams

                state.viewState?.let {
                    this.restoreState(it)
                }

                chromeClient.context = context
                webChromeClient = chromeClient
                webViewClient = client

                // Avoid covering other components
                this.setLayerType(state.webSettings.androidWebSettings.layerType, null)

                settings.apply {
                    state.webSettings.let {
                        javaScriptEnabled = it.isJavaScriptEnabled
                        userAgentString = it.customUserAgentString
                        allowFileAccessFromFileURLs = it.allowFileAccessFromFileURLs
                        allowUniversalAccessFromFileURLs = it.allowUniversalAccessFromFileURLs
                        setSupportZoom(it.supportZoom)
                    }

                    state.webSettings.androidWebSettings.let {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                            safeBrowsingEnabled = it.safeBrowsingEnabled
                        }
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                            isAlgorithmicDarkeningAllowed = it.isAlgorithmicDarkeningAllowed
                        }
                        setBackgroundColor(state.webSettings.backgroundColor.toArgb())
                        allowFileAccess = it.allowFileAccess
                        textZoom = it.textZoom
                        useWideViewPort = it.useWideViewPort
                        standardFontFamily = it.standardFontFamily
                        defaultFontSize = it.defaultFontSize
                        loadsImagesAutomatically = it.loadsImagesAutomatically
                        domStorageEnabled = it.domStorageEnabled
                        mediaPlaybackRequiresUserGesture = it.mediaPlaybackRequiresUserGesture
                    }
                }
                if (WebViewFeature.isFeatureSupported(WebViewFeature.FORCE_DARK)) {
                    val nightModeFlags =
                        resources.configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK
                    if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {
                        WebSettingsCompat.setForceDark(
                            this.settings,
                            WebSettingsCompat.FORCE_DARK_ON,
                        )
                    } else {
                        WebSettingsCompat.setForceDark(
                            this.settings,
                            WebSettingsCompat.FORCE_DARK_OFF,
                        )
                    }

                    if (WebViewFeature.isFeatureSupported(WebViewFeature.FORCE_DARK_STRATEGY)) {
                        WebSettingsCompat.setForceDarkStrategy(
                            this.settings,
                            WebSettingsCompat.DARK_STRATEGY_WEB_THEME_DARKENING_ONLY,
                        )
                    }
                }
            }.also {
                val androidWebView = AndroidWebView(it, scope, webViewJsBridge)
                state.webView = androidWebView
                webViewJsBridge?.webView = androidWebView
            }
        },
        modifier = modifier,
        onReset = {},
        onRelease = {
            onDispose(it)
        },
    )
}

/**
 * AccompanistWebViewClient
 *
 * A parent class implementation of WebViewClient that can be subclassed to add custom behaviour.
 *
 * As Accompanist Web needs to set its own web client to function, it provides this intermediary
 * class that can be overriden if further custom behaviour is required.
 */
open class AccompanistWebViewClient : WebViewClient() {
    open lateinit var state: WebViewState
        internal set
    open lateinit var navigator: WebViewNavigator
        internal set
    private var isRedirect = false

    override fun onPageStarted(
        view: WebView,
        url: String?,
        favicon: Bitmap?,
    ) {
        super.onPageStarted(view, url, favicon)
        KLogger.d {
            "onPageStarted: $url"
        }
        state.loadingState = LoadingState.Loading(0.0f)
        state.errorsForCurrentRequest.clear()
        state.pageTitle = null
        state.lastLoadedUrl = url

        // set scale level
        @Suppress("ktlint:standard:max-line-length")
        val script =
            "var meta = document.createElement('meta');meta.setAttribute('name', 'viewport');meta.setAttribute('content', 'width=device-width, initial-scale=${state.webSettings.zoomLevel}, maximum-scale=10.0, minimum-scale=0.1,user-scalable=yes');document.getElementsByTagName('head')[0].appendChild(meta);"
        navigator.evaluateJavaScript(script)
    }

    override fun onPageFinished(
        view: WebView,
        url: String?,
    ) {
        super.onPageFinished(view, url)
        KLogger.d {
            "onPageFinished: $url"
        }
        state.loadingState = LoadingState.Finished
        state.lastLoadedUrl = url
    }

    override fun doUpdateVisitedHistory(
        view: WebView,
        url: String?,
        isReload: Boolean,
    ) {
        KLogger.d {
            "doUpdateVisitedHistory: $url"
        }
        super.doUpdateVisitedHistory(view, url, isReload)

        navigator.canGoBack = view.canGoBack()
        navigator.canGoForward = view.canGoForward()
    }

    override fun onReceivedError(
        view: WebView,
        request: WebResourceRequest?,
        error: WebResourceError?,
    ) {
        super.onReceivedError(view, request, error)
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            KLogger.e {
                "onReceivedError: $error"
            }
            return
        }
        KLogger.e {
            "onReceivedError: ${error?.description}"
        }
        if (error != null) {
            state.errorsForCurrentRequest.add(
                WebViewError(
                    code = error.errorCode,
                    description = error.description.toString(),
                    isFromMainFrame = request?.isForMainFrame ?: false,
                ),
            )
        }
    }

    override fun shouldOverrideUrlLoading(
        view: WebView?,
        request: WebResourceRequest?,
    ): Boolean {
        KLogger.d {
            "shouldOverrideUrlLoading: ${request?.url} ${request?.isForMainFrame} ${request?.isRedirect} ${request?.method}"
        }
        if (isRedirect || request == null || navigator.requestInterceptor == null) {
            isRedirect = false
            return super.shouldOverrideUrlLoading(view, request)
        }
        val isRedirectRequest =
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                request.isRedirect
            } else {
                false
            }
        val webRequest =
            WebRequest(
                request.url.toString(),
                request.requestHeaders?.toMutableMap() ?: mutableMapOf(),
                request.isForMainFrame,
                isRedirectRequest,
                request.method ?: "GET",
            )
        val interceptResult =
            navigator.requestInterceptor!!.onInterceptUrlRequest(
                webRequest,
                navigator,
            )
        return when (interceptResult) {
            is WebRequestInterceptResult.Allow -> {
                false
            }

            is WebRequestInterceptResult.Reject -> {
                true
            }

            is WebRequestInterceptResult.Modify -> {
                isRedirect = true
                interceptResult.request.apply {
                    navigator.stopLoading()
                    navigator.loadUrl(this.url, this.headers)
                }
                true
            }
        }
    }
}

/**
 * AccompanistWebChromeClient
 *
 * A parent class implementation of WebChromeClient that can be subclassed to add custom behaviour.
 *
 * As Accompanist Web needs to set its own web client to function, it provides this intermediary
 * class that can be overriden if further custom behaviour is required.
 */
open class AccompanistWebChromeClient : WebChromeClient() {
    open lateinit var state: WebViewState
        internal set
    lateinit var context: Context
        internal set
    private var lastLoadedUrl = ""

    override fun onReceivedTitle(
        view: WebView,
        title: String?,
    ) {
        super.onReceivedTitle(view, title)
        KLogger.d {
            "onReceivedTitle: $title url:${view.url}"
        }
        state.pageTitle = title
        state.lastLoadedUrl = view.url ?: ""
    }

    override fun onReceivedIcon(
        view: WebView,
        icon: Bitmap?,
    ) {
        super.onReceivedIcon(view, icon)
//        state.pageIcon = icon
    }

    override fun onProgressChanged(
        view: WebView,
        newProgress: Int,
    ) {
        super.onProgressChanged(view, newProgress)
        if (state.loadingState is LoadingState.Finished && view.url == lastLoadedUrl) return
        state.loadingState =
            if (newProgress == 100) {
                LoadingState.Finished
            } else {
                LoadingState.Loading(newProgress / 100.0f)
            }
        lastLoadedUrl = view.url ?: ""
    }

    override fun onPermissionRequest(request: PermissionRequest) {
        val grantedPermissions = mutableListOf<String>()
        KLogger.d { "onPermissionRequest received request for resources [${request.resources}]" }

        request.resources.forEach { resource ->
            var androidPermission: String? = null

            when (resource) {
                PermissionRequest.RESOURCE_AUDIO_CAPTURE -> {
                    androidPermission = android.Manifest.permission.RECORD_AUDIO
                }

                PermissionRequest.RESOURCE_MIDI_SYSEX -> {
                    // MIDI sysex is only available on Android M and above
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                        if (state.webSettings.androidWebSettings.allowMidiSysexMessages) {
                            grantedPermissions.add(PermissionRequest.RESOURCE_MIDI_SYSEX)
                        }
                    }
                }

                PermissionRequest.RESOURCE_PROTECTED_MEDIA_ID -> {
                    if (state.webSettings.androidWebSettings.allowProtectedMedia) {
                        grantedPermissions.add(PermissionRequest.RESOURCE_PROTECTED_MEDIA_ID)
                    }
                }

                PermissionRequest.RESOURCE_VIDEO_CAPTURE -> {
                    androidPermission = android.Manifest.permission.CAMERA
                }
            }

            if (androidPermission != null) {
                if (ContextCompat.checkSelfPermission(context, androidPermission) == PackageManager.PERMISSION_GRANTED) {
                    grantedPermissions.add(resource)
                    KLogger.d {
                        "onPermissionRequest permission [$androidPermission] was already granted for resource [$resource]"
                    }
                } else {
                    KLogger.w {
                        "onPermissionRequest didn't find already granted permission [$androidPermission] for resource [$resource]"
                    }
                }
            }
        }

        if (grantedPermissions.isNotEmpty()) {
            request.grant(grantedPermissions.toTypedArray())
            KLogger.d { "onPermissionRequest granted permissions: ${grantedPermissions.joinToString()}" }
        } else {
            request.deny()
            KLogger.d { "onPermissionRequest denied permissions: ${request.resources}" }
        }
    }

    override fun getDefaultVideoPoster(): Bitmap? {
        return if (state.webSettings.androidWebSettings.hideDefaultVideoPoster) {
            Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888)
        } else {
            super.getDefaultVideoPoster()
        }
    }
}

--- 文件结束: AccompanistWebView.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\androidMain\kotlin\com\multiplatform\webview\web\AndroidWebView.kt ---
--- 大小: 3.62 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import android.webkit.JavascriptInterface
import android.webkit.WebView
import com.multiplatform.webview.jsbridge.JsMessage
import com.multiplatform.webview.jsbridge.WebViewJsBridge
import com.multiplatform.webview.util.KLogger
import kotlinx.coroutines.CoroutineScope
import kotlinx.serialization.json.Json

/**
 * Created By Kevin Zou On 2023/9/5
 */

actual typealias NativeWebView = WebView

/**
 * Android implementation of [IWebView]
 */
class AndroidWebView(
    override val webView: WebView,
    override val scope: CoroutineScope,
    override val webViewJsBridge: WebViewJsBridge?,
) : IWebView {
    init {
        initWebView()
    }

    override fun canGoBack() = webView.canGoBack()

    override fun canGoForward() = webView.canGoForward()

    override fun loadUrl(
        url: String,
        additionalHttpHeaders: Map<String, String>,
    ) {
        webView.loadUrl(url, additionalHttpHeaders)
    }

    override fun loadHtml(
        html: String?,
        baseUrl: String?,
        mimeType: String?,
        encoding: String?,
        historyUrl: String?,
    ) {
        if (html == null) return
        webView.loadDataWithBaseURL(baseUrl, html, mimeType, encoding, historyUrl)
    }

    override suspend fun loadHtmlFile(fileName: String) {
        KLogger.d {
            "loadHtmlFile: $fileName"
        }
        webView.loadUrl("file:///android_asset/$fileName")
    }

    override fun postUrl(
        url: String,
        postData: ByteArray,
    ) {
        webView.postUrl(url, postData)
    }

    override fun goBack() {
        webView.goBack()
    }

    override fun goForward() {
        webView.goForward()
    }

    override fun reload() {
        webView.reload()
    }

    override fun stopLoading() {
        webView.stopLoading()
    }

    override fun evaluateJavaScript(
        script: String,
        callback: ((String) -> Unit)?,
    ) {
        val androidScript = "javascript:$script"
        KLogger.d {
            "evaluateJavaScript: $androidScript"
        }
        webView.post {
            webView.evaluateJavascript(androidScript, callback)
        }
    }

    override fun injectJsBridge() {
        if (webViewJsBridge == null) return
        super.injectJsBridge()
        val callAndroid =
            """
            window.${webViewJsBridge.jsBridgeName}.postMessage = function (message) {
                    window.androidJsBridge.call(message)
                };
            """.trimIndent()
        evaluateJavaScript(callAndroid)
    }

    override fun initJsBridge(webViewJsBridge: WebViewJsBridge) {
        webView.addJavascriptInterface(this, "androidJsBridge")
    }

    @JavascriptInterface
    fun call(request: String) {
        KLogger.d { "call from JS: $request" }
        val message = Json.decodeFromString<JsMessage>(request)
        KLogger.d {
            "call from JS: $message"
        }
        webViewJsBridge?.dispatch(message)
    }

    @JavascriptInterface
    fun callAndroid(
        id: Int,
        method: String,
        params: String,
    ) {
        KLogger.d { "callAndroid call from JS: $id, $method, $params" }
        webViewJsBridge?.dispatch(JsMessage(id, method, params))
    }

    override fun scrollOffset(): Pair<Int, Int> {
        return Pair(webView.scrollX, webView.scrollY)
    }

    override fun saveState(): WebViewBundle? {
        val bundle = WebViewBundle()
        return if (webView.saveState(bundle) != null) {
            bundle
        } else {
            null
        }
    }
}

--- 文件结束: AndroidWebView.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\androidMain\kotlin\com\multiplatform\webview\web\AndroidWebViewBundle.kt ---
--- 大小: 141.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

/**
 * Created By Kevin Zou On 2023/12/9
 */
actual typealias WebViewBundle = android.os.Bundle

--- 文件结束: AndroidWebViewBundle.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\androidMain\kotlin\com\multiplatform\webview\web\WebView.android.kt ---
--- 大小: 1.60 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import android.content.Context
import androidx.compose.runtime.Composable
import androidx.compose.runtime.Immutable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import com.multiplatform.webview.jsbridge.WebViewJsBridge

/**
 * Android WebView implementation.
 */
@Composable
actual fun ActualWebView(
    state: WebViewState,
    modifier: Modifier,
    captureBackPresses: Boolean,
    navigator: WebViewNavigator,
    webViewJsBridge: WebViewJsBridge?,
    onCreated: (NativeWebView) -> Unit,
    onDispose: (NativeWebView) -> Unit,
    platformWebViewParams: PlatformWebViewParams?,
    factory: (WebViewFactoryParam) -> NativeWebView,
) {
    AccompanistWebView(
        state,
        modifier,
        captureBackPresses,
        navigator,
        webViewJsBridge,
        onCreated = onCreated,
        onDispose = onDispose,
        client = platformWebViewParams?.client ?: remember { AccompanistWebViewClient() },
        chromeClient = platformWebViewParams?.chromeClient ?: remember { AccompanistWebChromeClient() },
        factory = { factory(WebViewFactoryParam(it)) },
    )
}

/** Android WebView factory parameters: a context. */
actual data class WebViewFactoryParam(val context: Context)

/** Default WebView factory for Android. */
actual fun defaultWebViewFactory(param: WebViewFactoryParam) = android.webkit.WebView(param.context)

@Immutable
actual data class PlatformWebViewParams(
    val client: AccompanistWebViewClient? = null,
    val chromeClient: AccompanistWebChromeClient? = null,
)

--- 文件结束: WebView.android.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\cookie\Cookie.kt ---
--- 大小: 2.99 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.cookie

/**
 * Cookie data class.
 */
data class Cookie(
    /**
     * The cookie name.
     * */
    val name: String,
    /**
     * The cookie value.
     * */
    val value: String,
    /**
     * The cookie domain.
     * available on `Android` only if [androidx.webkit.WebViewFeature.GET_COOKIE_INFO] feature is supported.
     * */
    val domain: String? = null,
    /**
     * The cookie expiration date in milliseconds.
     * available on `Android` only if [androidx.webkit.WebViewFeature.GET_COOKIE_INFO] feature is supported.
     * */
    val path: String? = null,
    /**
     * The cookie expiration date in milliseconds.
     * available on `Android` only if [androidx.webkit.WebViewFeature.GET_COOKIE_INFO] feature is supported.
     * */
    val expiresDate: Long? = null,
    /**
     * Whether the cookie is only valid for the current session.
     * */
    val isSessionOnly: Boolean = false,
    /**
     * The cookie same site policy.
     * available on `Android` only if [androidx.webkit.WebViewFeature.GET_COOKIE_INFO] feature is supported.
     * */
    val sameSite: HTTPCookieSameSitePolicy? = null,
    /**
     * Whether the cookie is secure.
     * available on `Android` only if [androidx.webkit.WebViewFeature.GET_COOKIE_INFO] feature is supported.
     * */
    val isSecure: Boolean? = null,
    /**
     * Whether the cookie is HTTP only.
     * available on `Android` only if [androidx.webkit.WebViewFeature.GET_COOKIE_INFO] feature is supported.
     * */
    val isHttpOnly: Boolean? = null,
    /**
     * The cookie maximum age in seconds.
     * available on `Android` only if [androidx.webkit.WebViewFeature.GET_COOKIE_INFO] feature is supported.
     * */
    val maxAge: Long? = null,
) {
    enum class HTTPCookieSameSitePolicy {
        /**
         * The default value; allows cookies to be sent normally.
         */
        NONE,

        /**
         * Cookies are not sent with cross-site requests.
         */
        LAX,

        /**
         * Cookies are only sent with requests originating from the same website.
         */
        STRICT,
    }

    override fun toString(): String {
        var cookieValue = "$name=$value; Path=$path"

        if (domain != null) cookieValue += "; Domain=$domain"

        if (expiresDate != null) cookieValue += "; Expires=" + getCookieExpirationDate(expiresDate)

        if (maxAge != null) cookieValue += "; Max-Age=$maxAge"

        if (isSecure != null && isSecure) cookieValue += "; Secure"

        if (isHttpOnly != null && isHttpOnly) cookieValue += "; HttpOnly"

        if (sameSite != null) cookieValue += "; SameSite=$sameSite"

        cookieValue += ";"

        return cookieValue
    }
}

/**
 * Get cookie expiration date.
 * @param expiresDate The cookie expiration date in milliseconds.
 * @return The cookie expiration date in [String] format.
 * */
expect fun getCookieExpirationDate(expiresDate: Long): String

--- 文件结束: Cookie.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\cookie\CookieManager.kt ---
--- 大小: 1.34 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.cookie

/**
 * Cookie Manager exposing access to cookies of the WebView.
 * This is an interface to allow platform specific implementations.
 * ---------------------------------------------------------------
 * PS: Not having it as expect/actual class was a conscious decision,
 * since expect/actual classes will be marked as beta in coming kotlin releases.
 * */
interface CookieManager {
    /**
     * Sets a cookie for the given url.
     * @param url The url for which the cookie is to be set.
     * @param cookie The cookie to be set.
     * */
    suspend fun setCookie(
        url: String,
        cookie: Cookie,
    )

    /**
     * Gets all the cookies for the given url.
     * @param url The url for which the cookies are to be retrieved.
     *
     * @return A list of cookies for the given url.
     * */
    suspend fun getCookies(url: String): List<Cookie>

    /**
     * Removes all the cookies.
     * */
    suspend fun removeAllCookies()

    /**
     * Removes all the cookies for the given url.
     * @param url The url for which the cookies are to be removed.
     * */
    suspend fun removeCookies(url: String)
}

/**
 * Creates a [CookieManager] instance.
 */
@Suppress("FunctionName") // Builder Function
expect fun WebViewCookieManager(): CookieManager

--- 文件结束: CookieManager.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\jsbridge\IJsMessageHandler.kt ---
--- 大小: 1.28 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.jsbridge

import com.multiplatform.webview.web.WebViewNavigator
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

/**
 * Created By Kevin Zou On 2023/10/31
 */

/**
 * The Interface for handling JS messages.
 */
interface IJsMessageHandler {
    /**
     * The name of the method that will be called on the JS side.
     */
    fun methodName(): String

    fun canHandle(methodName: String) = methodName() == methodName

    /**
     * The logic to handle the JS message.
     * @param message The message that was dispatched from JS.
     * @param navigator The navigator that can be used to control the WebView.
     * @param callback The callback that can be used to send data back to JS.
     */
    fun handle(
        message: JsMessage,
        navigator: WebViewNavigator?,
        callback: (String) -> Unit,
    )
}

/**
 * Decode the params of [JsMessage] to the given type.
 */
inline fun <reified T : Any> IJsMessageHandler.processParams(message: JsMessage): T {
    return Json.decodeFromString(message.params)
}

/**
 * Encode the given data to a JSON string.
 */
inline fun <reified T : Any> IJsMessageHandler.dataToJsonString(res: T): String {
    return Json.encodeToString(res)
}

--- 文件结束: IJsMessageHandler.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\jsbridge\JsMessage.kt ---
--- 大小: 580.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.jsbridge

import kotlinx.serialization.Serializable

/**
 * Created By Kevin Zou On 2023/10/31
 */

/**
 * A message dispatched from JS to native.
 * @param callbackId The callback id that will be used to send data back to JS.
 * @param methodName The name of the method that will be called on the JS side.
 * @param params The parameters that will be passed to the JS method. This should be a JSON string.
 */
@Serializable
data class JsMessage(
    val callbackId: Int,
    val methodName: String,
    val params: String,
)

--- 文件结束: JsMessage.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\jsbridge\JsMessageDispatcher.kt ---
--- 大小: 968.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.jsbridge

import androidx.compose.runtime.Immutable
import com.multiplatform.webview.web.WebViewNavigator

/**
 * Created By Kevin Zou On 2023/10/31
 */

/**
 * A message dispatched from JS to native.
 */
@Immutable
internal class JsMessageDispatcher {
    private val jsHandlerMap = mutableMapOf<String, IJsMessageHandler>()

    fun registerJSHandler(handler: IJsMessageHandler) {
        jsHandlerMap[handler.methodName()] = handler
    }

    fun dispatch(
        message: JsMessage,
        navigator: WebViewNavigator? = null,
        callback: (String) -> Unit,
    ) {
        jsHandlerMap[message.methodName]?.handle(message, navigator, callback)
    }

    fun canHandle(id: String) = jsHandlerMap.containsKey(id)

    fun unregisterJSHandler(handler: IJsMessageHandler) {
        jsHandlerMap.remove(handler.methodName())
    }

    fun clear() {
        jsHandlerMap.clear()
    }
}

--- 文件结束: JsMessageDispatcher.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\jsbridge\WebViewJsBridge.kt ---
--- 大小: 1.47 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.jsbridge

import androidx.compose.runtime.Composable
import androidx.compose.runtime.Immutable
import androidx.compose.runtime.remember
import com.multiplatform.webview.web.IWebView
import com.multiplatform.webview.web.WebViewNavigator

/**
 * Created By Kevin Zou On 2023/10/31
 */

/**
 * A bridge that can be used to communicate between native and web.
 */
@Immutable
open class WebViewJsBridge(val navigator: WebViewNavigator? = null, val jsBridgeName: String = "kmpJsBridge") {
    private val jsMessageDispatcher = JsMessageDispatcher()
    var webView: IWebView? = null

    fun register(handler: IJsMessageHandler) {
        jsMessageDispatcher.registerJSHandler(handler)
    }

    fun unregister(handler: IJsMessageHandler) {
        jsMessageDispatcher.unregisterJSHandler(handler)
    }

    fun clear() {
        jsMessageDispatcher.clear()
    }

    fun dispatch(message: JsMessage) {
        jsMessageDispatcher.dispatch(message, navigator) {
            onCallback(it, message.callbackId)
        }
    }

    private fun onCallback(
        data: String,
        callbackId: Int,
    ) {
        webView?.evaluateJavaScript("window.$jsBridgeName.onCallback($callbackId, '$data')")
    }
}

/**
 * Create a [WebViewJsBridge] that is remembered across Compositions.
 */
@Composable
fun rememberWebViewJsBridge(navigator: WebViewNavigator? = null): WebViewJsBridge = remember { WebViewJsBridge(navigator) }

--- 文件结束: WebViewJsBridge.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\request\RequestInterceptor.kt ---
--- 大小: 333.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.request

import com.multiplatform.webview.web.WebViewNavigator

/**
 * Interface for intercepting requests in WebView.
 */
interface RequestInterceptor {
    fun onInterceptUrlRequest(
        request: WebRequest,
        navigator: WebViewNavigator,
    ): WebRequestInterceptResult
}

--- 文件结束: RequestInterceptor.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\request\WebRequest.kt ---
--- 大小: 319.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.request

/**
 * Created By Kevin Zou On 2023/11/29
 */
data class WebRequest(
    val url: String,
    val headers: MutableMap<String, String> = mutableMapOf(),
    val isForMainFrame: Boolean = false,
    val isRedirect: Boolean = false,
    val method: String = "GET",
)

--- 文件结束: WebRequest.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\request\WebRequestInterceptResult.kt ---
--- 大小: 321.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.request

/**
 * Created By Kevin Zou On 2023/11/30
 */
sealed interface WebRequestInterceptResult {
    data object Allow : WebRequestInterceptResult

    data object Reject : WebRequestInterceptResult

    class Modify(val request: WebRequest) : WebRequestInterceptResult
}

--- 文件结束: WebRequestInterceptResult.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\setting\PlatformWebSettings.kt ---
--- 大小: 11.91 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.setting

import androidx.compose.ui.graphics.Color

/**
 * Created By Kevin Zou On 2023/9/20
 */
sealed class PlatformWebSettings {
    /**
     * Android web settings
     */
    data class AndroidWebSettings(
        /**
         * Enables or disables file access within WebView.
         * Note that this enables or disables file system access only. Assets and resources
         * are still accessible using file:///android_asset and file:///android_res.
         * <p class="note">
         * <b>Note:</b> Apps should not open {@code file://} URLs from any external source in
         * WebView, don't enable this if your app accepts arbitrary URLs from external sources.
         * It's recommended to always use
         * <a href="{@docRoot}reference/androidx/webkit/WebViewAssetLoader">
         * androidx.webkit.WebViewAssetLoader</a> to access files including assets and resources over
         * {@code http(s)://} schemes, instead of {@code file://} URLs. To prevent possible security
         * issues targeting {@link android.os.Build.VERSION_CODES#Q} and earlier, you should explicitly
         * set this value to {@code false}.
         * <p>
         * The default value is {@code true} for apps targeting
         * {@link android.os.Build.VERSION_CODES#Q} and below, and {@code false} when targeting
         * {@link android.os.Build.VERSION_CODES#R} and above.
         */
        var allowFileAccess: Boolean = false,
        /**
         * The text zoom of the page in percent. The default is 100.
         *
         * @param textZoom the text zoom in percent
         */
        var textZoom: Int = 100,
        /**
         * Whether the WebView should enable support for the &quot;viewport&quot;
         * HTML meta tag or should use a wide viewport.
         * When the value of the setting is {@code false}, the layout width is always set to the
         * width of the WebView control in device-independent (CSS) pixels.
         * When the value is {@code true} and the page contains the viewport meta tag, the value
         * of the width specified in the tag is used. If the page does not contain the tag or
         * does not provide a width, then a wide viewport will be used.
         *
         */
        var useWideViewPort: Boolean = false,
        /**
         * The standard font family name. The default is "sans-serif".
         *
         * @param font a font family name
         */
        var standardFontFamily: String = "sans-serif",
        /**
         * The default font size. The default is 16.
         *
         * @param size a non-negative integer between 1 and 72. Any number outside
         *             the specified range will be pinned.
         */
        var defaultFontSize: Int = 16,
        /**
         * Sets whether the WebView should load image resources. Note that this method
         * controls loading of all images, including those embedded using the data
         * URI scheme. Use {@link #setBlockNetworkImage} to control loading only
         * of images specified using network URI schemes. Note that if the value of this
         * setting is changed from {@code false} to {@code true}, all images resources referenced
         * by content currently displayed by the WebView are loaded automatically.
         * The default is {@code true}.
         *
         * @param flag whether the WebView should load image resources
         */
        var loadsImagesAutomatically: Boolean = true,
        /**
         * Control whether algorithmic darkening is allowed.
         *
         * <p class="note">
         * <b>Note:</b> This API and the behaviour described only apply to apps with
         * {@code targetSdkVersion} &ge; {@link android.os.Build.VERSION_CODES#TIRAMISU}.
         *
         * <p>
         * WebView always sets the media query {@code prefers-color-scheme} according to the app's
         * theme attribute {@link android.R.styleable#Theme_isLightTheme isLightTheme}, i.e.
         * {@code prefers-color-scheme} is {@code light} if isLightTheme is true or not specified,
         * otherwise it is {@code dark}. This means that the web content's light or dark style will
         * be applied automatically to match the app's theme if the content supports it.
         *
         * <p>
         * Algorithmic darkening is disallowed by default.
         * <p>
         * If the app's theme is dark and it allows algorithmic darkening, WebView will attempt to
         * darken web content using an algorithm, if the content doesn't define its own dark styles
         * and doesn't explicitly disable darkening.
         *
         * <p>
         * If Android is applying Force Dark to WebView then WebView will ignore the value of
         * this setting and behave as if it were set to true.
         *
         * <p>
         * The deprecated {@link #setForceDark} and related API are no-ops in apps with
         * {@code targetSdkVersion} &ge; {@link android.os.Build.VERSION_CODES#TIRAMISU},
         * but they still apply to apps with
         * {@code targetSdkVersion} &lt; {@link android.os.Build.VERSION_CODES#TIRAMISU}.
         *
         * <p>
         * The below table summarizes how APIs work with different apps.
         *
         * <table border="2" width="85%" align="center" cellpadding="5">
         *     <thead>
         *         <tr>
         *             <th>App</th>
         *             <th>Web content which uses {@code prefers-color-scheme}</th>
         *             <th>Web content which does not use {@code prefers-color-scheme}</th>
         *         </tr>
         *     </thead>
         *     <tbody>
         *     <tr>
         *         <td>App with {@code isLightTheme} True or not set</td>
         *         <td>Renders with the light theme defined by the content author.</td>
         *         <td>Renders with the default styling defined by the content author.</td>
         *     </tr>
         *     <tr>
         *         <td>App with Android forceDark in effect</td>
         *         <td>Renders with the dark theme defined by the content author.</td>
         *         <td>Renders with the styling modified to dark colors by an algorithm
         *             if allowed by the content author.</td>
         *     </tr>
         *     <tr>
         *         <td>App with {@code isLightTheme} False,
         *            {@code targetSdkVersion} &lt; {@link android.os.Build.VERSION_CODES#TIRAMISU},
         *             and has {@code FORCE_DARK_AUTO}</td>
         *         <td>Renders with the dark theme defined by the content author.</td>
         *         <td>Renders with the default styling defined by the content author.</td>
         *     </tr>
         *     <tr>
         *         <td>App with {@code isLightTheme} False,
         *            {@code targetSdkVersion} &ge; {@link android.os.Build.VERSION_CODES#TIRAMISU},
         *             and {@code setAlgorithmicDarkening(false)}</td>
         *         <td>Renders with the dark theme defined by the content author.</td>
         *         <td>Renders with the default styling defined by the content author.</td>
         *     </tr>
         *     <tr>
         *         <td>App with {@code isLightTheme} False,
         *            {@code targetSdkVersion} &ge; {@link android.os.Build.VERSION_CODES#TIRAMISU},
         *             and {@code setAlgorithmicDarkening(true)}</td>
         *         <td>Renders with the dark theme defined by the content author.</td>
         *         <td>Renders with the styling modified to dark colors by an algorithm if allowed
         *             by the content author.</td>
         *     </tr>
         *     </tbody>
         * </table>
         * </p>
         *
         */
        var isAlgorithmicDarkeningAllowed: Boolean = false,
        /**
         * whether Safe Browsing is enabled. Safe Browsing allows WebView to
         * protect against malware and phishing attacks by verifying the links.
         */
        var safeBrowsingEnabled: Boolean = true,
        /**
         * Whether the DOM storage API is enabled. The default value is {@code false}.
         */
        var domStorageEnabled: Boolean = false,
        /**
         * Whether the a user gesture is required to play media. The default is {@code true}.
         */
        var mediaPlaybackRequiresUserGesture: Boolean = true,
        /**
         * Controls whether the `RESOURCE_PROTECTED_MEDIA_ID` permission requests should be
         * automatically granted or not. Necessary to be able to play back DRM protected media
         * inside the WebView.
         * The default is {@code false}.
         */
        var allowProtectedMedia: Boolean = false,
        /**
         * Controls whether the `RESOURCE_MIDI_SYSEX` permission requests should be automatically
         * granted or not. The resource will allow sysex messages to be sent to or received from MIDI
         * devices. Available on API level 21 and above.
         */
        var allowMidiSysexMessages: Boolean = false,
        /**
         * Controls whether the default video poster (a gray, pixelated play button) should be hidden.
         */
        var hideDefaultVideoPoster: Boolean = false,
        /**
         * The Layer Type of the WebView.
         * Default is [LayerType.HARDWARE]
         */
        var layerType: Int = LayerType.HARDWARE,
    ) : PlatformWebSettings() {
        object LayerType {
            const val NONE = 0
            const val SOFTWARE = 1
            const val HARDWARE = 2
        }
    }

    /**
     * Desktop web settings
     */
    data class DesktopWebSettings(
        var offScreenRendering: Boolean = false,
        var transparent: Boolean = true,
        var disablePopupWindows: Boolean = false,
    ) : PlatformWebSettings()

    /**
     * IOS web settings
     */
    data class IOSWebSettings(
        /**
         * The ios default opaque display
         * The default value is {@code false}.
         * When Value is true will turn off these two properties:
         * @param backgroundColor,@param underPageBackgroundColor
         */
        var opaque: Boolean = false,
        /**
         * The background color of the WebView client. The default value is {@code null}.
         * Will use WebSettings backgroundColor when null.
         *
         * @param backgroundColor a color value
         */
        var backgroundColor: Color? = null,
        /**
         * The background color shown when the WebView client scrolls past the bounds of the active page.
         * The default value is {@code null}. Will use WebSettings backgroundColor when null.
         *
         * @param underPageBackgroundColor a color value
         */
        var underPageBackgroundColor: Color? = null,
        /**
         * Whether the WebView bounces when scrolled past content bounds.
         * The default value is {@code true}.
         */
        var bounces: Boolean = true,
        /**
         * Whether horizontal and vertical scrolling is enabled. The default value is {@code true}.
         */
        var scrollEnabled: Boolean = true,
        /**
         * Whether the horizontal scroll indicator is visible. The default value is {@code true}.
         */
        var showHorizontalScrollIndicator: Boolean = true,
        /**
         * Whether the vertical scroll indicator is visible. The default value is {@code true}.
         */
        var showVerticalScrollIndicator: Boolean = true,
        /**
         * Whether a user gesture is required to play media. The default is {@code true}.
         */
        var mediaPlaybackRequiresUserGesture: Boolean = true,
        /**
         * Whether the WebView supports inspection via MacOS Safari. The default value is {@code false}.
         */
        var isInspectable: Boolean = false,
    ) : PlatformWebSettings()
}

--- 文件结束: PlatformWebSettings.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\setting\WebSettings.kt ---
--- 大小: 3.64 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.setting

import androidx.compose.ui.graphics.Color
import com.multiplatform.webview.util.KLogSeverity
import com.multiplatform.webview.util.KLogger

/**
 * Created By Kevin Zou On 2023/9/20
 */

/**
 * Web settings for different platform
 */
class WebSettings {
    /**
     * Whether the WebView should enable JavaScript execution.
     * Default is true.
     */
    var isJavaScriptEnabled = true

    /**
     * WebView's user-agent string.
     * Default is null.
     */
    var customUserAgentString: String? = null

    /**
     * Set the zoom level of the WebView.
     * Default is 1.0.
     */
    var zoomLevel: Double = 1.0

    /**
     * whether the WebView should support zooming using its on-screen zoom
     * controls and gestures. The default is {@code true}.
     *
     * @param support whether the WebView should support zoom
     */
    var supportZoom: Boolean = true

    /**
     * Whether cross-origin requests in the context of a file scheme URL should be allowed to
     * access content from other file scheme URLs. Note that some accesses such as image HTML
     * elements don't follow same-origin rules and aren't affected by this setting.
     * <p>
     * <b>Don't</b> enable this setting if you open files that may be created or altered by
     * external sources. Enabling this setting allows malicious scripts loaded in a {@code file://}
     * context to access arbitrary local files including WebView cookies and app private data.
     * <p class="note">
     * Loading content via {@code file://} URLs is generally discouraged. See the note in
     * {@link #setAllowFileAccess}.
     * <p>
     *
     *  The default value is false.
     */
    var allowFileAccessFromFileURLs: Boolean = false

    /**
     * Whether cross-origin requests in the context of a file scheme URL should be allowed to
     * access content from <i>any</i> origin. This includes access to content from other file
     * scheme URLs or web contexts. Note that some access such as image HTML elements doesn't
     * follow same-origin rules and isn't affected by this setting.
     * <p>
     * <b>Don't</b> enable this setting if you open files that may be created or altered by
     * external sources. Enabling this setting allows malicious scripts loaded in a {@code file://}
     * context to launch cross-site scripting attacks, either accessing arbitrary local files
     * including WebView cookies, app private data or even credentials used on arbitrary web sites.
     * <p class="note">
     * Loading content via {@code file://} URLs is generally discouraged. See the note in
     * {@link #setAllowFileAccess}.
     * <p>
     *
     * The default value is false.
     */
    var allowUniversalAccessFromFileURLs: Boolean = false

    /**
     * Log severity for the WebView.
     * Default is [KLogSeverity.Info]
     */
    var logSeverity: KLogSeverity = KLogSeverity.Info
        set(value) {
            field = value
            KLogger.setMinSeverity(value)
        }

    /**
     * The background color of the WebView client. The default value is {@code Color.Transparent}.
     * Not supported on Desktop platform.
     */
    var backgroundColor = Color.Transparent

    /**
     * Android platform specific settings
     */
    val androidWebSettings = PlatformWebSettings.AndroidWebSettings()

    /**
     * Desktop platform specific settings
     */
    val desktopWebSettings = PlatformWebSettings.DesktopWebSettings()

    /**
     * iOS platform specific settings
     */
    val iOSWebSettings = PlatformWebSettings.IOSWebSettings()
}

--- 文件结束: WebSettings.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\util\Extension.kt ---
--- 大小: 223.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.util

fun Pair<Number, Number>?.isZero(): Boolean {
    return this == null || (first == 0 && second == 0)
}

fun Pair<Number, Number>?.notZero(): Boolean {
    return !isZero()
}

--- 文件结束: Extension.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\util\KLogger.kt ---
--- 大小: 1.24 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.util

import co.touchlab.kermit.DefaultFormatter
import co.touchlab.kermit.Logger
import co.touchlab.kermit.Severity
import co.touchlab.kermit.mutableLoggerConfigInit
import co.touchlab.kermit.platformLogWriter

/**
 * Created By Kevin Zou On 2023/10/16
 */
internal object KLogger : Logger(
    config = mutableLoggerConfigInit(listOf(platformLogWriter(DefaultFormatter))),
    tag = "ComposeWebView",
) {
    init {
        setMinSeverity(KLogSeverity.Info)
    }

    fun setMinSeverity(severity: KLogSeverity) {
        mutableConfig.minSeverity = severity.toKermitSeverity()
    }

    // For iOS, it will not print out the log if the severity is upper than Debug in AS.
    fun info(msg: () -> String) {
        d { msg() }
    }
}

enum class KLogSeverity {
    Verbose,
    Debug,
    Info,
    Warn,
    Error,
    Assert,
}

fun KLogSeverity.toKermitSeverity(): Severity {
    return when (this) {
        KLogSeverity.Verbose -> Severity.Verbose
        KLogSeverity.Debug -> Severity.Debug
        KLogSeverity.Info -> Severity.Info
        KLogSeverity.Warn -> Severity.Warn
        KLogSeverity.Error -> Severity.Error
        KLogSeverity.Assert -> Severity.Assert
    }
}

--- 文件结束: KLogger.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\util\Platform.kt ---
--- 大小: 972.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.util

/**
 * Created By Kevin Zou On 2023/12/5
 */

/**
 * A class that represents the platform that the code is running on.
 */
internal sealed class Platform {
    /**
     * The Android platform.
     */
    data object Android : Platform()

    /**
     * The Desktop platform.
     */
    data object Desktop : Platform()

    /**
     * The iOS platform.
     */
    data object IOS : Platform()

    /**
     * Whether the current platform is Android.
     */
    fun isAndroid() = this is Android

    /**
     * Whether the current platform is Desktop.
     */
    fun isDesktop() = this is Desktop

    /**
     * Whether the current platform is iOS.
     */
    fun isIOS() = this is IOS
}

/**
 * Get the current platform.
 */
internal expect fun getPlatform(): Platform

internal expect fun getPlatformVersion(): String

internal expect fun getPlatformVersionDouble(): Double

--- 文件结束: Platform.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\web\IWebView.kt ---
--- 大小: 6.67 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import com.multiplatform.webview.jsbridge.WebViewJsBridge
import com.multiplatform.webview.util.KLogger
import compose_webview_multiplatform.webview.generated.resources.Res
import kotlinx.coroutines.CoroutineScope
import org.jetbrains.compose.resources.ExperimentalResourceApi

/**
 * Created By Kevin Zou On 2023/9/5
 */

expect class NativeWebView

/**
 * Interface for WebView
 */
interface IWebView {
    /**
     * The native web view instance. On Android, this is an instance of [android.webkit.WebView].
     * On iOS, this is an instance of [WKWebView]. On desktop, this is an instance of [KCEFBrowser].
     */
    val webView: NativeWebView

    val scope: CoroutineScope

    val webViewJsBridge: WebViewJsBridge?

    /**
     * True when the web view is able to navigate backwards, false otherwise.
     */
    fun canGoBack(): Boolean

    /**
     * True when the web view is able to navigate forwards, false otherwise.
     */
    fun canGoForward(): Boolean

    /**
     * Loads the given URL.
     *
     * @param url The URL of the resource to load.
     */
    fun loadUrl(
        url: String,
        additionalHttpHeaders: Map<String, String> = emptyMap(),
    )

    /**
     * Loads the given HTML string.
     *
     * @param html The HTML string to load.
     * @param baseUrl The URL to use as the page's base URL.
     * @param mimeType The MIME type of the data in the string.
     * @param encoding The encoding of the data in the string.
     * @param historyUrl The history URL for the loaded HTML. Leave null to use about:blank.
     */
    fun loadHtml(
        html: String? = null,
        baseUrl: String? = null,
        mimeType: String? = "text/html",
        encoding: String? = "utf-8",
        historyUrl: String? = null,
    )

    suspend fun loadContent(content: WebContent) {
        when (content) {
            is WebContent.Url ->
                loadUrl(
                    content.url,
                    content.additionalHttpHeaders,
                )

            is WebContent.Data ->
                loadHtml(
                    content.data,
                    content.baseUrl,
                    content.mimeType,
                    content.encoding,
                    content.historyUrl,
                )

            is WebContent.File ->
                loadHtmlFile(
                    content.fileName,
                )

            is WebContent.Post ->
                postUrl(
                    content.url,
                    content.postData,
                )

            is WebContent.NavigatorOnly -> {}
        }
    }

    /**
     * Loads the given HTML file.
     * The file should be placed in the resources folder.
     * It should not contains external links to css or js files.
     * Otherwise, use [loadHtmlFile] instead.
     *
     * @param fileName The name of the HTML file to load.
     */
    @OptIn(ExperimentalResourceApi::class)
    suspend fun loadRawHtmlFile(fileName: String) {
        val html = Res.readBytes(fileName).decodeToString().trimIndent()
        loadHtml(html, encoding = "utf-8")
    }

    /**
     * Loads the given HTML file.
     * The file should be placed in the commonMain/resources/assets folder.
     * It supports external links to css or js files on Android and iOS.
     * But it is not supported on desktop platform because it is not supported by CEF currently.
     *
     * @param fileName The name of the HTML file to load.
     */
    suspend fun loadHtmlFile(fileName: String)

    /**
     * Posts the given data to the given URL.
     *
     * @param url The URL to post the data to.
     * @param postData The data to post.
     */
    fun postUrl(
        url: String,
        postData: ByteArray,
    )

    /**
     * Navigates the webview back to the previous page.
     */
    fun goBack()

    /**
     * Navigates the webview forward after going back from a page.
     */
    fun goForward()

    /**
     * Reloads the current page in the webview.
     */
    fun reload()

    /**
     * Stops the current page load (if one is loading).
     */
    fun stopLoading()

    /**
     * Evaluates the given JavaScript in the context of the currently displayed page.
     * and returns the result of the evaluation.
     * Note: The callback will not be called from desktop platform because it is not supported by CEF currently.
     */
    fun evaluateJavaScript(
        script: String,
        callback: ((String) -> Unit)? = null,
    )

    /**
     * Injects the initialization JavaScript code for JSBridge setup
     * into the currently displayed page.
     */
    fun injectJsBridge() {
        if (webViewJsBridge == null) return
        val jsBridgeName = webViewJsBridge!!.jsBridgeName
        KLogger.d {
            "IWebView injectJsBridge"
        }
        val initJs =
            """
            window.$jsBridgeName = {
                callbacks: {},
                callbackId: 0,
                callNative: function (methodName, params, callback) {
                    var message = {
                        methodName: methodName,
                        params: params,
                        callbackId: callback ? window.$jsBridgeName.callbackId++ : -1
                    };
                    if (callback) {
                        window.$jsBridgeName.callbacks[message.callbackId] = callback;
                        console.log('add callback: ' + message.callbackId + ', ' + callback);
                    }
                    window.$jsBridgeName.postMessage(JSON.stringify(message));
                },
                onCallback: function (callbackId, data) {
                    var callback = window.$jsBridgeName.callbacks[callbackId];
                    console.log('onCallback: ' + callbackId + ', ' + data + ', ' + callback);
                    if (callback) {
                        callback(data);
                        delete window.$jsBridgeName.callbacks[callbackId];
                    }
                }
            };
            """.trimIndent()
        evaluateJavaScript(initJs)
    }

    /**
     * Inject the JSBridge into the WebView.
     */
    fun initJsBridge(webViewJsBridge: WebViewJsBridge)

    /**
     * Initialize the WebView.
     */
    fun initWebView() {
        webViewJsBridge?.apply {
            initJsBridge(this)
        }
    }

    /**
     * Save the current state of the WebView.
     */
    fun saveState(): WebViewBundle?

    /**
     * Get the scroll offset of the WebView.
     */
    fun scrollOffset(): Pair<Int, Int>
}

--- 文件结束: IWebView.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\web\LoadingState.kt ---
--- 大小: 740.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

/**
 * Created By Kevin Zou On 2023/9/5
 */

/**
 * Sealed class for constraining possible loading states.
 * See [Initializing], [Loading], and [Finished].
 */
sealed class LoadingState {
    /**
     * Describes a WebView that has not yet loaded for the first time.
     */
    data object Initializing : LoadingState()

    /**
     * Describes a webview between `onPageStarted` and `onPageFinished` events, contains a
     * [progress] property which is updated by the webview.
     */
    data class Loading(val progress: Float) : LoadingState()

    /**
     * Describes a webview that has finished loading content.
     */
    data object Finished : LoadingState()
}

--- 文件结束: LoadingState.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\web\WebContent.kt ---
--- 大小: 2.05 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

/**
 * Created By Kevin Zou On 2023/9/5
 */

/**
 * Sealed class for constraining possible web content.
 */
sealed class WebContent {
    /**
     * Url content
     */
    data class Url(
        val url: String,
        val additionalHttpHeaders: Map<String, String> = emptyMap(),
    ) : WebContent()

    /**
     * Data content
     */
    data class Data(
        val data: String,
        val baseUrl: String? = null,
        val encoding: String = "utf-8",
        val mimeType: String? = null,
        val historyUrl: String? = null,
    ) : WebContent()

    data class File(
        val fileName: String,
    ) : WebContent()

    /**
     * Post content
     */
    data class Post(
        val url: String,
        val postData: ByteArray,
    ) : WebContent() {
        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (other == null || this::class != other::class) return false

            other as Post

            if (url != other.url) return false
            if (!postData.contentEquals(other.postData)) return false

            return true
        }

        override fun hashCode(): Int {
            var result = url.hashCode()
            result = 31 * result + postData.contentHashCode()
            return result
        }
    }

    /**
     * @return the current url
     */
    @Deprecated("Use state.lastLoadedUrl instead")
    fun getCurrentUrl(): String? {
        return when (this) {
            is Url -> url
            is Data -> baseUrl
            is File -> throw IllegalStateException("Unsupported")
            is Post -> url
            is NavigatorOnly -> throw IllegalStateException("Unsupported")
        }
    }

    data object NavigatorOnly : WebContent()
}

/**
 * @return the WebContent.Url with the given url
 */
internal fun WebContent.withUrl(url: String) =
    when (this) {
        is WebContent.Url -> copy(url = url)
        else -> WebContent.Url(url)
    }

--- 文件结束: WebContent.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\web\WebView.kt ---
--- 大小: 7.89 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.snapshotFlow
import androidx.compose.ui.Modifier
import com.multiplatform.webview.jsbridge.WebViewJsBridge
import com.multiplatform.webview.util.KLogger
import com.multiplatform.webview.util.getPlatform
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.flow.merge

/**
 * Created By Kevin Zou On 2023/8/31
 */

/**
 * Provides a basic WebView composable.
 * This version of the function is provided for backwards compatibility by using the older
 * onCreated and onDispose callbacks and is missing the factory parameter.
 *
 * @param state The webview state holder where the Uri to load is defined.
 * @param modifier A compose modifier
 * @param captureBackPresses Set to true to have this Composable capture back presses and navigate
 * the WebView back.
 * @param navigator An optional navigator object that can be used to control the WebView's
 * navigation from outside the composable.
 * @param onCreated Called when the WebView is first created.
 * @param onDispose Called when the WebView is destroyed.
 * @sample sample.BasicWebViewSample
 */
@Composable
fun WebView(
    state: WebViewState,
    modifier: Modifier = Modifier,
    captureBackPresses: Boolean = true,
    navigator: WebViewNavigator = rememberWebViewNavigator(),
    webViewJsBridge: WebViewJsBridge? = null,
    onCreated: () -> Unit = {},
    onDispose: () -> Unit = {},
    platformWebViewParams: PlatformWebViewParams? = null,
) {
    WebView(
        state = state,
        modifier = modifier,
        captureBackPresses = captureBackPresses,
        navigator = navigator,
        webViewJsBridge = webViewJsBridge,
        onCreated = { _ -> onCreated() },
        onDispose = { _ -> onDispose() },
        platformWebViewParams = platformWebViewParams,
    )
}

/**
 * Provides a basic WebView composable.
 *
 * @param state The webview state holder where the Uri to load is defined.
 * @param modifier A compose modifier
 * @param captureBackPresses Set to true to have this Composable capture back presses and navigate
 * the WebView back.
 * @param navigator An optional navigator object that can be used to control the WebView's
 * navigation from outside the composable.
 * @param onCreated Called when the WebView is first created.
 * @param onDispose Called when the WebView is destroyed.
 * @param factory A function that creates a platform-specific WebView object.
 * @sample sample.BasicWebViewSample
 */
@Composable
fun WebView(
    state: WebViewState,
    modifier: Modifier = Modifier,
    captureBackPresses: Boolean = true,
    navigator: WebViewNavigator = rememberWebViewNavigator(),
    webViewJsBridge: WebViewJsBridge? = null,
    onCreated: (NativeWebView) -> Unit = {},
    onDispose: (NativeWebView) -> Unit = {},
    platformWebViewParams: PlatformWebViewParams? = null,
    factory: ((WebViewFactoryParam) -> NativeWebView)? = null,
) {
    val webView = state.webView

    webView?.let { wv ->
        LaunchedEffect(wv, navigator) {
            with(navigator) {
                KLogger.d {
                    "wv.handleNavigationEvents()"
                }
                wv.handleNavigationEvents()
            }
        }

        // Desktop will handle the first load by itself
        if (!getPlatform().isDesktop()) {
            LaunchedEffect(wv, state) {
                snapshotFlow { state.content }.collect { content ->
                    when (content) {
                        is WebContent.Url -> {
                            state.lastLoadedUrl = content.url
                            wv.loadUrl(content.url, content.additionalHttpHeaders)
                        }

                        is WebContent.Data -> {
                            wv.loadHtml(
                                content.data,
                                content.baseUrl,
                                content.mimeType,
                                content.encoding,
                                content.historyUrl,
                            )
                        }

                        is WebContent.File -> {
                            wv.loadHtmlFile(content.fileName)
                        }

                        is WebContent.Post -> {
                            wv.postUrl(
                                content.url,
                                content.postData,
                            )
                        }

                        is WebContent.NavigatorOnly -> {
                            // NO-OP
                        }
                    }
                }
            }
        }

        // inject the js bridge when the webview is loaded.
        if (webViewJsBridge != null && !getPlatform().isDesktop()) {
            LaunchedEffect(wv, state) {
                val loadingStateFlow =
                    snapshotFlow { state.loadingState }.filter { it is LoadingState.Finished }
                val lastLoadedUrFlow =
                    snapshotFlow { state.lastLoadedUrl }.filter { !it.isNullOrEmpty() }

                // Only inject the js bridge when url is changed and the loading state is finished.
                merge(loadingStateFlow, lastLoadedUrFlow).collect {
                    // double check the loading state to make sure the WebView is loaded.
                    if (state.loadingState is LoadingState.Finished) {
                        wv.injectJsBridge()
                    }
                }
            }
        }
    }

    ActualWebView(
        state = state,
        modifier = modifier,
        captureBackPresses = captureBackPresses,
        navigator = navigator,
        webViewJsBridge = webViewJsBridge,
        onCreated = onCreated,
        onDispose = onDispose,
        platformWebViewParams = platformWebViewParams,
        factory = factory ?: ::defaultWebViewFactory,
    )

    DisposableEffect(Unit) {
        onDispose {
            KLogger.d {
                "WebView DisposableEffect"
            }
            webViewJsBridge?.clear()
        }
    }
}

/**
 * Platform specific parameters given to the WebView factory function. This is a
 * data class containing one or more platform-specific values necessary to
 * create a platform-specific WebView:
 *   - On Android, this contains a `Context` object
 *   - On iOS, this contains a `WKWebViewConfiguration` object created from the
 *     provided WebSettings
 *   - On Desktop, this contains the WebViewState, the KCEFClient, and the
 *     loaded file content (if a file, otherwise, an empty string)
 */
expect class WebViewFactoryParam

/**
 * Platform specific parameters given to the WebView composable function:
 *   - On Android, this contains an optional `AccompanistWebViewClient` and `AccompanistWebChromeClient`
 *   - On iOS, this is currently unused
 *   - On Desktop, this is currently unused
 */
expect class PlatformWebViewParams

/**
 * Platform specific default WebView factory function. This can be called from
 * a custom factory function for any platforms that don't need to be customized.
 */
expect fun defaultWebViewFactory(param: WebViewFactoryParam): NativeWebView

/**
 * Expect API of [WebView] that is implemented in the platform-specific modules.
 */
@Composable
expect fun ActualWebView(
    state: WebViewState,
    modifier: Modifier = Modifier,
    captureBackPresses: Boolean = true,
    navigator: WebViewNavigator = rememberWebViewNavigator(),
    webViewJsBridge: WebViewJsBridge? = null,
    onCreated: (NativeWebView) -> Unit = {},
    onDispose: (NativeWebView) -> Unit = {},
    platformWebViewParams: PlatformWebViewParams? = null,
    factory: (WebViewFactoryParam) -> NativeWebView = ::defaultWebViewFactory,
)

--- 文件结束: WebView.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\web\WebViewBundle.kt ---
--- 大小: 119.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

/**
 * Created By Kevin Zou On 2023/12/9
 */
expect class WebViewBundle()

--- 文件结束: WebViewBundle.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\web\WebViewError.kt ---
--- 大小: 519.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import androidx.compose.runtime.Immutable

/**
 * Created By Kevin Zou On 2023/9/5
 */

/**
 * A wrapper class to hold errors from the WebView.
 */
@Immutable
data class WebViewError(
    /**
     * The request the error came from.
     */
    val code: Int,
    /**
     * The error that was reported.
     */
    val description: String,
    /**
     * Is the error related to a request from the main frame?
     */
    val isFromMainFrame: Boolean,
)

--- 文件结束: WebViewError.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\web\WebViewNavigator.kt ---
--- 大小: 9.11 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import androidx.compose.runtime.Composable
import androidx.compose.runtime.Stable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import com.multiplatform.webview.request.RequestInterceptor
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

/**
 * Created By Kevin Zou On 2023/9/5
 */

/**
 * Allows control over the navigation of a WebView from outside the composable. E.g. for performing
 * a back navigation in response to the user clicking the "up" button in a TopAppBar.
 *
 * @see [rememberWebViewNavigator]
 */
@Stable
class WebViewNavigator(val coroutineScope: CoroutineScope, val requestInterceptor: RequestInterceptor? = null) {
    /**
     * Sealed class for constraining possible navigation events.
     */
    private sealed interface NavigationEvent {
        /**
         * Navigate back event.
         */
        data object Back : NavigationEvent

        /**
         * Navigate forward event.
         */
        data object Forward : NavigationEvent

        /**
         * Reload event.
         */
        data object Reload : NavigationEvent

        /**
         * Stop loading event.
         */
        data object StopLoading : NavigationEvent

        /**
         * Load url event.
         */
        data class LoadUrl(
            val url: String,
            val additionalHttpHeaders: Map<String, String> = emptyMap(),
        ) : NavigationEvent

        /**
         * Load html event.
         */
        data class LoadHtml(
            val html: String,
            val baseUrl: String? = null,
            val mimeType: String? = null,
            val encoding: String? = "utf-8",
            val historyUrl: String? = null,
        ) : NavigationEvent

        data class LoadHtmlFile(
            val fileName: String,
        ) : NavigationEvent

        /**
         * Post url event.
         */
        data class PostUrl(
            val url: String,
            val postData: ByteArray,
        ) : NavigationEvent {
            override fun equals(other: Any?): Boolean {
                if (this === other) return true
                if (other == null || this::class != other::class) return false

                other as PostUrl

                if (url != other.url) return false
                if (!postData.contentEquals(other.postData)) return false

                return true
            }

            override fun hashCode(): Int {
                var result = url.hashCode()
                result = 31 * result + postData.contentHashCode()
                return result
            }
        }

        /**
         * Evaluate javascript event.
         */
        data class EvaluateJavaScript(
            val script: String,
            val callback: ((String) -> Unit)?,
        ) : NavigationEvent
    }

    /**
     * A [MutableSharedFlow] of [NavigationEvent]s that is used to communicate navigation events
     * from the composable to the [IWebView].
     */
    private val navigationEvents: MutableSharedFlow<NavigationEvent> = MutableSharedFlow(replay = 1)

    /**
     * Handles navigation events from the composable and calls the appropriate method on the
     * [IWebView].
     * Use Dispatchers.Main to ensure that the webview methods are called on UI thread
     */
    internal suspend fun IWebView.handleNavigationEvents(): Nothing =
        withContext(Dispatchers.Main) {
            navigationEvents.collect { event ->
                when (event) {
                    is NavigationEvent.Back -> goBack()
                    is NavigationEvent.Forward -> goForward()
                    is NavigationEvent.Reload -> reload()
                    is NavigationEvent.StopLoading -> stopLoading()
                    is NavigationEvent.LoadHtml ->
                        loadHtml(
                            event.html,
                            event.baseUrl,
                            event.mimeType,
                            event.encoding,
                            event.historyUrl,
                        )

                    is NavigationEvent.LoadHtmlFile -> {
                        loadHtmlFile(event.fileName)
                    }

                    is NavigationEvent.LoadUrl -> {
                        loadUrl(event.url, event.additionalHttpHeaders)
                    }

                    is NavigationEvent.PostUrl -> {
                        postUrl(event.url, event.postData)
                    }

                    is NavigationEvent.EvaluateJavaScript -> {
                        evaluateJavaScript(event.script, event.callback)
                    }
                }
            }
        }

    /**
     * True when the web view is able to navigate backwards, false otherwise.
     */
    var canGoBack: Boolean by mutableStateOf(false)
        internal set

    /**
     * True when the web view is able to navigate forwards, false otherwise.
     */
    var canGoForward: Boolean by mutableStateOf(false)
        internal set

    /**
     * Loads the given URL.
     *
     * @param url The URL of the resource to load.
     */
    fun loadUrl(
        url: String,
        additionalHttpHeaders: Map<String, String> = emptyMap(),
    ) {
        coroutineScope.launch {
            navigationEvents.emit(
                NavigationEvent.LoadUrl(
                    url,
                    additionalHttpHeaders,
                ),
            )
        }
    }

    /**
     * Loads the given HTML string.
     *
     * @param html The HTML string to load.
     * @param baseUrl The URL to use as the page's base URL.
     * @param mimeType The MIME type of the data in the string.
     * @param encoding The encoding of the data in the string.
     * @param historyUrl The history URL for the loaded HTML. Leave null to use about:blank.
     */
    fun loadHtml(
        html: String,
        baseUrl: String? = null,
        mimeType: String? = null,
        encoding: String? = "utf-8",
        historyUrl: String? = null,
    ) {
        coroutineScope.launch {
            navigationEvents.emit(
                NavigationEvent.LoadHtml(
                    html,
                    baseUrl,
                    mimeType,
                    encoding,
                    historyUrl,
                ),
            )
        }
    }

    fun loadHtmlFile(fileName: String) {
        coroutineScope.launch {
            navigationEvents.emit(
                NavigationEvent.LoadHtmlFile(
                    fileName,
                ),
            )
        }
    }

    /**
     * Posts the given data to the given URL.
     *
     * @param url The URL to post the data to.
     * @param postData The data to post.
     */
    fun postUrl(
        url: String,
        postData: ByteArray,
    ) {
        coroutineScope.launch {
            navigationEvents.emit(
                NavigationEvent.PostUrl(
                    url,
                    postData,
                ),
            )
        }
    }

    /**
     * Evaluates the given JavaScript in the context of the currently displayed page.
     *
     * @param script The JavaScript to evaluate.
     * @param callback A callback to be invoked when the script execution completes.
     */
    fun evaluateJavaScript(
        script: String,
        callback: ((String) -> Unit)? = null,
    ) {
        coroutineScope.launch {
            navigationEvents.emit(
                NavigationEvent.EvaluateJavaScript(
                    script,
                    callback,
                ),
            )
        }
    }

    /**
     * Navigates the webview back to the previous page.
     */
    fun navigateBack() {
        coroutineScope.launch { navigationEvents.emit(NavigationEvent.Back) }
    }

    /**
     * Navigates the webview forward after going back from a page.
     */
    fun navigateForward() {
        coroutineScope.launch { navigationEvents.emit(NavigationEvent.Forward) }
    }

    /**
     * Reloads the current page in the webview.
     */
    fun reload() {
        coroutineScope.launch { navigationEvents.emit(NavigationEvent.Reload) }
    }

    /**
     * Stops the current page load (if one is loading).
     */
    fun stopLoading() {
        coroutineScope.launch { navigationEvents.emit(NavigationEvent.StopLoading) }
    }
}

/**
 * Creates and remembers a [WebViewNavigator] using the default [CoroutineScope] or a provided
 * override.
 */
@Composable
fun rememberWebViewNavigator(
    coroutineScope: CoroutineScope = rememberCoroutineScope(),
    requestInterceptor: RequestInterceptor? = null,
): WebViewNavigator = remember(coroutineScope) { WebViewNavigator(coroutineScope, requestInterceptor) }

--- 文件结束: WebViewNavigator.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\commonMain\kotlin\com\multiplatform\webview\web\WebViewState.kt ---
--- 大小: 8.39 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.Saver
import androidx.compose.runtime.saveable.mapSaver
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.runtime.snapshots.SnapshotStateList
import com.multiplatform.webview.cookie.CookieManager
import com.multiplatform.webview.cookie.WebViewCookieManager
import com.multiplatform.webview.setting.WebSettings
import com.multiplatform.webview.util.KLogger
import com.multiplatform.webview.util.getPlatform
import com.multiplatform.webview.util.isZero

/**
 * Created By Kevin Zou On 2023/9/5
 */

/**
 * A state holder to hold the state for the WebView. In most cases this will be remembered
 * using the rememberWebViewState(uri) function.
 */
class WebViewState(webContent: WebContent) {
    /**
     * The last loaded url. This is updated when a new page is loaded.
     */
    var lastLoadedUrl: String? by mutableStateOf(null)
        internal set

    /**
     *  The content being loaded by the WebView
     */
    var content: WebContent by mutableStateOf(webContent)

    /**
     * Whether the WebView is currently [LoadingState.Loading] data in its main frame (along with
     * progress) or the data loading has [LoadingState.Finished]. See [LoadingState]
     */
    var loadingState: LoadingState by mutableStateOf(LoadingState.Initializing)
        internal set

    /**
     * Whether the webview is currently loading data in its main frame
     */
    val isLoading: Boolean
        get() = loadingState !is LoadingState.Finished

    /**
     * The title received from the loaded content of the current page
     */
    var pageTitle: String? by mutableStateOf(null)
        internal set

    /**
     * A list for errors captured in the last load. Reset when a new page is loaded.
     * Errors could be from any resource (iframe, image, etc.), not just for the main page.
     * To filter for only main frame errors, use [WebViewError.isFromMainFrame].
     */
    val errorsForCurrentRequest: SnapshotStateList<WebViewError> = mutableStateListOf()

    /**
     * Custom Settings for WebView.
     */
    val webSettings: WebSettings by mutableStateOf(WebSettings())

    /**
     * Whether the WebView should capture back presses and navigate back.
     * We need access to this in the state saver. An internal DisposableEffect or AndroidView
     * onDestroy is called after the state saver and so can't be used.
     */
    internal var webView by mutableStateOf<IWebView?>(null)

    /**
     * The native web view instance. On Android, this is an instance of [android.webkit.WebView].
     * On iOS, this is an instance of [WKWebView]. On desktop, this is an instance of [KCEFBrowser].
     */
    val nativeWebView get() = webView?.webView ?: error("WebView is not initialized")

    /**
     * The saved view state from when the view was destroyed last. To restore state,
     * use the navigator and only call loadUrl if the bundle is null.
     * See WebViewSaveStateSample.
     */
    var viewState: WebViewBundle? = null
        internal set

    var scrollOffset: Pair<Int, Int> = 0 to 0
        internal set

    /**
     * CookieManager for WebView.
     * Exposes access to the cookie manager for webView
     */
    val cookieManager: CookieManager by mutableStateOf(WebViewCookieManager())
}

/**
 * Creates a WebView state that is remembered across Compositions.
 *
 * @param url The url to load in the WebView
 * @param additionalHttpHeaders Optional, additional HTTP headers that are passed to [AccompanistWebView.loadUrl].
 *                              Note that these headers are used for all subsequent requests of the WebView.
 */
@Composable
fun rememberWebViewState(
    url: String,
    additionalHttpHeaders: Map<String, String> = emptyMap(),
    extraSettings: WebSettings.() -> Unit = {},
): WebViewState =
// Rather than using .apply {} here we will recreate the state, this prevents
    // a recomposition loop when the webview updates the url itself.
    remember {
        WebViewState(
            WebContent.Url(
                url = url,
                additionalHttpHeaders = additionalHttpHeaders,
            ),
        )
    }.apply {
        this.content =
            WebContent.Url(
                url = url,
                additionalHttpHeaders = additionalHttpHeaders,
            )
        extraSettings(this.webSettings)
    }

/**
 * Creates a WebView state that is remembered across Compositions and saved
 * across activity recreation.
 * When using saved state, you cannot change the URL via recomposition. The only way to load
 * a URL is via a WebViewNavigator.
 *
 * @param data The uri to load in the WebView
 * @sample com.google.accompanist.sample.webview.WebViewSaveStateSample
 */
@Composable
fun rememberSaveableWebViewState(
    url: String,
    additionalHttpHeaders: Map<String, String> = emptyMap(),
): WebViewState =
    if (getPlatform().isDesktop()) {
        rememberWebViewState(url, additionalHttpHeaders)
    } else {
        rememberSaveable(saver = WebStateSaver) {
            WebViewState(WebContent.NavigatorOnly)
        }
    }

val WebStateSaver: Saver<WebViewState, Any> =
    run {
        val pageTitleKey = "pagetitle"
        val lastLoadedUrlKey = "lastloaded"
        val stateBundleKey = "bundle"
        val scrollOffsetKey = "scrollOffset"

        mapSaver(
            save = {
                val viewState = it.webView?.saveState()
                KLogger.info {
                    "WebViewStateSaver Save: ${it.pageTitle}, ${it.lastLoadedUrl}, ${it.webView?.scrollOffset()}, $viewState"
                }
                mapOf(
                    pageTitleKey to it.pageTitle,
                    lastLoadedUrlKey to it.lastLoadedUrl,
                    stateBundleKey to viewState,
                    scrollOffsetKey to it.webView?.scrollOffset(),
                )
            },
            restore = {
                KLogger.info {
                    "WebViewStateSaver Restore: ${it[pageTitleKey]}, ${it[lastLoadedUrlKey]}, ${it["scrollOffset"]}, ${it[stateBundleKey]}"
                }
                val scrollOffset = it[scrollOffsetKey] as Pair<Int, Int>? ?: (0 to 0)
                val bundle = it[stateBundleKey] as WebViewBundle?
                WebViewState(WebContent.NavigatorOnly).apply {
                    this.pageTitle = it[pageTitleKey] as String?
                    this.lastLoadedUrl = it[lastLoadedUrlKey] as String?
                    bundle?.let { this.viewState = it }
                    if (!scrollOffset.isZero()) {
                        this.scrollOffset = scrollOffset
                    }
                }
            },
        )
    }

/**
 * Creates a WebView state that is remembered across Compositions.
 *
 * @param data The uri to load in the WebView
 * @param baseUrl The URL to use as the page's base URL.
 * @param encoding The encoding of the data in the string.
 * @param mimeType The MIME type of the data in the string.
 * @param historyUrl The history URL for the loaded HTML. Leave null to use about:blank.
 */
@Composable
fun rememberWebViewStateWithHTMLData(
    data: String,
    baseUrl: String? = null,
    encoding: String = "utf-8",
    mimeType: String? = null,
    historyUrl: String? = null,
): WebViewState =
    remember {
        WebViewState(WebContent.Data(data, baseUrl, encoding, mimeType, historyUrl))
    }.apply {
        this.content =
            WebContent.Data(
                data, baseUrl, encoding, mimeType, historyUrl,
            )
    }

/**
 * Creates a WebView state for HTML file loading that is remembered across Compositions.
 *
 * @param fileName The file to load in the WebView
 * Please note that the file should be placed in the commonMain/resources/assets folder.
 * The fileName just need to be the relative path to the assets folder.
 */
@Composable
fun rememberWebViewStateWithHTMLFile(fileName: String): WebViewState =
    remember {
        WebViewState(WebContent.File(fileName))
    }.apply {
        this.content = WebContent.File(fileName)
    }

--- 文件结束: WebViewState.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\desktopMain\kotlin\com\multiplatform\webview\cookie\DesktopCookieManager.kt ---
--- 大小: 2.41 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.cookie

import com.multiplatform.webview.util.KLogger
import dev.datlag.kcef.KCEFCookieManager
import org.cef.network.CefCookie
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.TimeZone

object DesktopCookieManager : CookieManager {
    override suspend fun setCookie(
        url: String,
        cookie: Cookie,
    ) {
        val currentTime = System.currentTimeMillis()
        val cefCookie =
            CefCookie(
                cookie.name,
                cookie.value,
                cookie.domain,
                cookie.path,
                cookie.isSecure ?: false,
                cookie.isHttpOnly ?: false,
                Date(currentTime),
                Date(currentTime),
                Date(cookie.expiresDate ?: currentTime).before(Date(currentTime)),
                Date(cookie.expiresDate ?: System.currentTimeMillis()),
            )
        val addedCookie = KCEFCookieManager.instance.setCookie(url, cefCookie)
        KLogger.d(tag = "DesktopCookieManager") { "Added Cookie: $addedCookie" }
    }

    override suspend fun getCookies(url: String): List<Cookie> {
        KLogger.d(tag = "DesktopCookieManager") { "DesktopCookieManager getCookies: $url" }

        return KCEFCookieManager.instance.getCookiesWhile(url, true).map {
            Cookie(
                name = it.name,
                value = it.value,
                domain = it.domain,
                path = it.path,
                expiresDate = it.expires?.time,
                sameSite = null,
                isSecure = it.secure,
                isHttpOnly = it.httponly,
                maxAge = null,
            )
        }
    }

    override suspend fun removeAllCookies() {
        KCEFCookieManager.instance.deleteAllCookies()
    }

    override suspend fun removeCookies(url: String) {
        KCEFCookieManager.instance.deleteCookies(url)
    }
}

actual fun getCookieExpirationDate(expiresDate: Long): String {
    val sdf =
        SimpleDateFormat("EEE, dd MMM yyyy hh:mm:ss z", Locale.US).apply {
            timeZone = TimeZone.getTimeZone("GMT")
        }
    return sdf.format(Date(expiresDate))
}

/**
 * Returns an instance of [DesktopCookieManager] for Desktop.
 */
@Suppress("FunctionName") // Builder Function
actual fun WebViewCookieManager(): CookieManager = DesktopCookieManager

--- 文件结束: DesktopCookieManager.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\desktopMain\kotlin\com\multiplatform\webview\util\getPlatform.kt ---
--- 大小: 533.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.util

internal actual fun getPlatform(): Platform {
    return Platform.Desktop
}

internal actual fun getPlatformVersion(): String {
    // TODO
    return "11.0"
}

internal actual fun getPlatformVersionDouble(): Double {
    val systemVersion = getPlatformVersion()
    val components = systemVersion.split(".")
    val major = components.getOrNull(0)?.toDoubleOrNull() ?: 0.0
    val minor = components.getOrNull(1)?.toDoubleOrNull() ?: 0.0
    return major + (minor / 10.0)
}

--- 文件结束: getPlatform.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\desktopMain\kotlin\com\multiplatform\webview\web\CefRequestExt.kt ---
--- 大小: 1.25 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import com.multiplatform.webview.setting.WebSettings
import dev.datlag.kcef.KCEFResourceRequestHandler
import org.cef.browser.CefBrowser
import org.cef.browser.CefFrame
import org.cef.browser.CefRequestContext
import org.cef.network.CefRequest

internal fun createModifiedRequestContext(settings: WebSettings): CefRequestContext {
    return CefRequestContext.createContext { browser, frame, request, isNavigation, isDownload, requestInitiator, disableDefaultHandling ->
        object : KCEFResourceRequestHandler(
            getGlobalDefaultHandler(browser, frame, request, isNavigation, isDownload, requestInitiator, disableDefaultHandling),
        ) {
            override fun onBeforeResourceLoad(
                browser: CefBrowser?,
                frame: CefFrame?,
                request: CefRequest?,
            ): Boolean {
                if (request != null) {
                    settings.customUserAgentString?.let(request::setUserAgentString)
                }
                return super.onBeforeResourceLoad(browser, frame, request)
            }
        }
    }
}

internal fun CefRequest.setUserAgentString(userAgent: String) {
    setHeaderByName("User-Agent", userAgent, true)
}

--- 文件结束: CefRequestExt.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\desktopMain\kotlin\com\multiplatform\webview\web\DesktopWebView.kt ---
--- 大小: 5.09 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import com.multiplatform.webview.jsbridge.JsMessage
import com.multiplatform.webview.jsbridge.WebViewJsBridge
import com.multiplatform.webview.util.KLogger
import dev.datlag.kcef.KCEFBrowser
import kotlinx.coroutines.CoroutineScope
import kotlinx.serialization.json.Json
import org.cef.browser.CefBrowser
import org.cef.browser.CefFrame
import org.cef.browser.CefMessageRouter
import org.cef.callback.CefQueryCallback
import org.cef.handler.CefMessageRouterHandlerAdapter
import org.cef.network.CefPostData
import org.cef.network.CefPostDataElement
import org.cef.network.CefRequest

actual typealias NativeWebView = KCEFBrowser

/**
 * Created By Kevin Zou On 2023/9/12
 */
class DesktopWebView(
    override val webView: KCEFBrowser,
    override val scope: CoroutineScope,
    override val webViewJsBridge: WebViewJsBridge?,
) : IWebView {
    init {
        initWebView()
    }

    override fun canGoBack() = webView.canGoBack()

    override fun canGoForward() = webView.canGoForward()

    override fun loadUrl(
        url: String,
        additionalHttpHeaders: Map<String, String>,
    ) {
        if (additionalHttpHeaders.isNotEmpty()) {
            val request =
                CefRequest.create().apply {
                    this.url = url
                    this.setHeaderMap(additionalHttpHeaders)
                }
            webView.loadRequest(request)
        } else {
            KLogger.d {
                "DesktopWebView loadUrl $url"
            }
            webView.loadURL(url)
        }
    }

    override fun loadHtml(
        html: String?,
        baseUrl: String?,
        mimeType: String?,
        encoding: String?,
        historyUrl: String?,
    ) {
        KLogger.d {
            "DesktopWebView loadHtml"
        }
        if (html != null) {
            webView.loadHtml(html, baseUrl ?: KCEFBrowser.BLANK_URI)
        }
    }

    override suspend fun loadHtmlFile(fileName: String) {
        // TODO
    }

    override fun postUrl(
        url: String,
        postData: ByteArray,
    ) {
        val request =
            CefRequest.create().apply {
                this.url = url
                this.postData =
                    CefPostData.create().apply {
                        this.addElement(
                            CefPostDataElement.create().apply {
                                this.setToBytes(postData.size, postData)
                            },
                        )
                    }
            }
        webView.loadRequest(request)
    }

    override fun goBack() = webView.goBack()

    override fun goForward() = webView.goForward()

    override fun reload() = webView.reload()

    override fun stopLoading() = webView.stopLoad()

    override fun evaluateJavaScript(
        script: String,
        callback: ((String) -> Unit)?,
    ) {
        KLogger.d {
            "evaluateJavaScript: $script"
        }
        webView.evaluateJavaScript(script) {
            if (it != null) {
                callback?.invoke(it)
            }
        }
    }

    override fun injectJsBridge() {
        if (webViewJsBridge == null) return
        super.injectJsBridge()
        KLogger.d {
            "DesktopWebView injectJsBridge"
        }
        val callDesktop =
            """
            window.${webViewJsBridge.jsBridgeName}.postMessage = function (message) {
                    window.cefQuery({request:message});
                };
            """.trimIndent()
        evaluateJavaScript(callDesktop)
    }

    override fun initJsBridge(webViewJsBridge: WebViewJsBridge) {
        KLogger.d {
            "DesktopWebView initJsBridge"
        }
        val router = CefMessageRouter.create()
        val handler =
            object : CefMessageRouterHandlerAdapter() {
                override fun onQuery(
                    browser: CefBrowser?,
                    frame: CefFrame?,
                    queryId: Long,
                    request: String?,
                    persistent: Boolean,
                    callback: CefQueryCallback?,
                ): Boolean {
                    if (request == null) {
                        return super.onQuery(
                            browser,
                            frame,
                            queryId,
                            request,
                            persistent,
                            callback,
                        )
                    }
                    val message = Json.decodeFromString<JsMessage>(request)
                    KLogger.d {
                        "onQuery Message: $message"
                    }
                    webViewJsBridge.dispatch(message)
                    return true
                }
            }
        router.addHandler(handler, false)
        webView.client.addMessageRouter(router)
    }

    override fun saveState(): WebViewBundle? {
        return null
    }

    override fun scrollOffset(): Pair<Int, Int> {
        return Pair(0, 0)
    }
}

--- 文件结束: DesktopWebView.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\desktopMain\kotlin\com\multiplatform\webview\web\DesktopWebViewBundle.kt ---
--- 大小: 117.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

/**
 * Created By Kevin Zou On 2023/12/9
 */
actual class WebViewBundle

--- 文件结束: DesktopWebViewBundle.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\desktopMain\kotlin\com\multiplatform\webview\web\DisablePopupWindowsLifeSpanHandler.kt ---
--- 大小: 530.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import org.cef.browser.CefBrowser
import org.cef.browser.CefFrame
import org.cef.handler.CefLifeSpanHandlerAdapter

class DisablePopupWindowsLifeSpanHandler : CefLifeSpanHandlerAdapter() {
    override fun onBeforePopup(
        browser: CefBrowser?,
        frame: CefFrame?,
        target_url: String?,
        target_frame_name: String?,
    ): Boolean {
        if (target_url != null) {
            browser?.loadURL(target_url)
        }
        return true
    }
}

--- 文件结束: DisablePopupWindowsLifeSpanHandler.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\desktopMain\kotlin\com\multiplatform\webview\web\WebEngineExt.kt ---
--- 大小: 7.71 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import com.multiplatform.webview.request.WebRequest
import com.multiplatform.webview.request.WebRequestInterceptResult
import com.multiplatform.webview.util.KLogger
import dev.datlag.kcef.KCEFBrowser
import org.cef.CefSettings
import org.cef.browser.CefBrowser
import org.cef.browser.CefFrame
import org.cef.handler.CefDisplayHandler
import org.cef.handler.CefLoadHandler
import org.cef.handler.CefRequestHandlerAdapter
import org.cef.network.CefRequest
import kotlin.math.abs
import kotlin.math.ln

/**
 * Created By Kevin Zou On 2023/9/12
 */
internal fun CefBrowser.getCurrentUrl(): String? {
    return this.url
}

internal fun CefBrowser.addDisplayHandler(state: WebViewState) {
    this.client.addDisplayHandler(
        object : CefDisplayHandler {
            override fun onAddressChange(
                browser: CefBrowser?,
                frame: CefFrame?,
                url: String?,
            ) {
                KLogger.d { "onAddressChange: $url" }
                state.lastLoadedUrl = getCurrentUrl()
            }

            override fun onTitleChange(
                browser: CefBrowser?,
                title: String?,
            ) {
                // https://magpcss.org/ceforum/viewtopic.php?t=11491
                // https://github.com/KevinnZou/compose-webview-multiplatform/issues/46
                val givenZoomLevel = state.webSettings.zoomLevel
                val realZoomLevel =
                    if (givenZoomLevel >= 0.0) {
                        ln(abs(givenZoomLevel)) / ln(1.2)
                    } else {
                        -ln(abs(givenZoomLevel)) / ln(1.2)
                    }
                KLogger.d { "titleProperty: $title" }
                zoomLevel = realZoomLevel
                state.pageTitle = title
            }

            override fun onFullscreenModeChange(
                p0: CefBrowser?,
                p1: Boolean,
            ) {
                // Not supported
            }

            override fun onTooltip(
                browser: CefBrowser?,
                text: String?,
            ): Boolean {
                return false
            }

            override fun onStatusMessage(
                browser: CefBrowser?,
                value: String?,
            ) {
            }

            override fun onConsoleMessage(
                browser: CefBrowser?,
                level: CefSettings.LogSeverity?,
                message: String?,
                source: String?,
                line: Int,
            ): Boolean {
                return false
            }

            override fun onCursorChange(
                browser: CefBrowser?,
                cursorType: Int,
            ): Boolean {
                return false
            }
        },
    )
}

internal fun CefBrowser.addLoadListener(
    state: WebViewState,
    navigator: WebViewNavigator,
) {
    this.client.addLoadHandler(
        object : CefLoadHandler {
            private var lastLoadedUrl = "null"

            override fun onLoadingStateChange(
                browser: CefBrowser?,
                isLoading: Boolean,
                canGoBack: Boolean,
                canGoForward: Boolean,
            ) {
                KLogger.d {
                    "onLoadingStateChange: $url, $isLoading $canGoBack $canGoForward"
                }
                if (isLoading) {
                    state.loadingState = LoadingState.Initializing
                } else {
                    state.loadingState = LoadingState.Finished
                    if (url != null && url != lastLoadedUrl) {
                        state.webView?.injectJsBridge()
                        lastLoadedUrl = url
                    }
                }
                navigator.canGoBack = canGoBack
                navigator.canGoForward = canGoForward
            }

            override fun onLoadStart(
                browser: CefBrowser?,
                frame: CefFrame?,
                transitionType: CefRequest.TransitionType?,
            ) {
                KLogger.d { "Load Start ${browser?.url}" }
                lastLoadedUrl = "null" // clean last loaded url for reload to work
                state.loadingState = LoadingState.Loading(0F)
                state.errorsForCurrentRequest.clear()
            }

            override fun onLoadEnd(
                browser: CefBrowser?,
                frame: CefFrame?,
                httpStatusCode: Int,
            ) {
                KLogger.d { "Load End ${browser?.url}" }
                state.loadingState = LoadingState.Finished
                navigator.canGoBack = canGoBack()
                navigator.canGoBack = canGoForward()
                state.lastLoadedUrl = getCurrentUrl()
            }

            override fun onLoadError(
                browser: CefBrowser?,
                frame: CefFrame?,
                errorCode: CefLoadHandler.ErrorCode?,
                errorText: String?,
                failedUrl: String?,
            ) {
                state.loadingState = LoadingState.Finished
                // TODO Error
                KLogger.i {
                    "Failed to load url: $errorCode ${failedUrl}\n$errorText"
                }
                state.errorsForCurrentRequest.add(
                    WebViewError(
                        code = errorCode?.code ?: 404,
                        description = "Failed to load url: ${failedUrl}\n$errorText",
                        isFromMainFrame = frame?.isMain ?: false,
                    ),
                )
            }
        },
    )
}

internal fun KCEFBrowser.addRequestHandler(
    state: WebViewState,
    navigator: WebViewNavigator,
) {
    client.addRequestHandler(
        object : CefRequestHandlerAdapter() {
            override fun onBeforeBrowse(
                browser: CefBrowser?,
                frame: CefFrame?,
                request: CefRequest?,
                userGesture: Boolean,
                isRedirect: Boolean,
            ): Boolean {
                navigator.requestInterceptor?.apply {
                    val map = mutableMapOf<String, String>()
                    request?.getHeaderMap(map)
                    KLogger.d { "onBeforeBrowse ${request?.url} $map" }
                    val webRequest =
                        WebRequest(
                            request?.url.toString(),
                            map,
                            isForMainFrame = frame?.isMain ?: false,
                            isRedirect = isRedirect,
                            request?.method ?: "GET",
                        )
                    val interceptResult =
                        this.onInterceptUrlRequest(
                            webRequest,
                            navigator,
                        )
                    return when (interceptResult) {
                        is WebRequestInterceptResult.Allow -> {
                            super.onBeforeBrowse(browser, frame, request, userGesture, isRedirect)
                        }

                        is WebRequestInterceptResult.Reject -> {
                            true
                        }

                        is WebRequestInterceptResult.Modify -> {
                            interceptResult.request.apply {
                                navigator.loadUrl(this.url, this.headers)
                            }
                            true
                        }
                    }
                }
                return super.onBeforeBrowse(browser, frame, request, userGesture, isRedirect)
            }
        },
    )
}

--- 文件结束: WebEngineExt.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\desktopMain\kotlin\com\multiplatform\webview\web\WebView.desktop.kt ---
--- 大小: 5.29 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.awt.SwingPanel
import com.multiplatform.webview.jsbridge.WebViewJsBridge
import compose_webview_multiplatform.webview.generated.resources.Res
import dev.datlag.kcef.KCEF
import dev.datlag.kcef.KCEFBrowser
import dev.datlag.kcef.KCEFClient
import org.cef.browser.CefRendering
import org.cef.browser.CefRequestContext
import org.jetbrains.compose.resources.ExperimentalResourceApi

/**
 * Desktop WebView implementation.
 */
@Composable
actual fun ActualWebView(
    state: WebViewState,
    modifier: Modifier,
    captureBackPresses: Boolean,
    navigator: WebViewNavigator,
    webViewJsBridge: WebViewJsBridge?,
    onCreated: (NativeWebView) -> Unit,
    onDispose: (NativeWebView) -> Unit,
    platformWebViewParams: PlatformWebViewParams?,
    factory: (WebViewFactoryParam) -> NativeWebView,
) {
    DesktopWebView(
        state,
        modifier,
        navigator,
        webViewJsBridge,
        onCreated = onCreated,
        onDispose = onDispose,
        factory = factory,
    )
}

/** Desktop WebView factory parameters: web view state, client, and possible file content. */
actual class WebViewFactoryParam(
    val state: WebViewState,
    val client: KCEFClient,
    val fileContent: String,
) {
    inline val webSettings get() = state.webSettings
    inline val rendering: CefRendering get() =
        if (webSettings.desktopWebSettings.offScreenRendering) {
            CefRendering.OFFSCREEN
        } else {
            CefRendering.DEFAULT
        }
    inline val transparent: Boolean get() = webSettings.desktopWebSettings.transparent
    val requestContext: CefRequestContext get() = createModifiedRequestContext(webSettings)
}

actual class PlatformWebViewParams

/** Default WebView factory for Desktop. */
actual fun defaultWebViewFactory(param: WebViewFactoryParam): NativeWebView =
    when (val content = param.state.content) {
        is WebContent.Url ->
            param.client.createBrowser(
                content.url,
                param.rendering,
                param.transparent,
                param.requestContext,
            )
        is WebContent.Data ->
            param.client.createBrowserWithHtml(
                content.data,
                content.baseUrl ?: KCEFBrowser.BLANK_URI,
                param.rendering,
                param.transparent,
            )
        is WebContent.File ->
            param.client.createBrowserWithHtml(
                param.fileContent,
                KCEFBrowser.BLANK_URI,
                param.rendering,
                param.transparent,
            )
        else ->
            param.client.createBrowser(
                KCEFBrowser.BLANK_URI,
                param.rendering,
                param.transparent,
                param.requestContext,
            )
    }

/**
 * Desktop WebView implementation.
 */
@OptIn(ExperimentalResourceApi::class)
@Composable
fun DesktopWebView(
    state: WebViewState,
    modifier: Modifier,
    navigator: WebViewNavigator,
    webViewJsBridge: WebViewJsBridge?,
    onCreated: (NativeWebView) -> Unit,
    onDispose: (NativeWebView) -> Unit,
    factory: (WebViewFactoryParam) -> NativeWebView,
) {
    val currentOnDispose by rememberUpdatedState(onDispose)
    val client =
        remember(state.webSettings.desktopWebSettings.disablePopupWindows) {
            KCEF.newClientOrNullBlocking()?.also {
                if (state.webSettings.desktopWebSettings.disablePopupWindows) {
                    it.addLifeSpanHandler(DisablePopupWindowsLifeSpanHandler())
                } else {
                    if (it.getLifeSpanHandler() is DisablePopupWindowsLifeSpanHandler) {
                        it.removeLifeSpanHandler()
                    }
                }
            }
        }
    val scope = rememberCoroutineScope()
    val fileContent by produceState("", state.content) {
        value =
            if (state.content is WebContent.File) {
                val res = Res.readBytes("assets/${(state.content as WebContent.File).fileName}")
                res.decodeToString().trimIndent()
            } else {
                ""
            }
    }

    val browser: KCEFBrowser? =
        remember(client, state.webSettings, fileContent) {
            client?.let { factory(WebViewFactoryParam(state, client, fileContent)) }
        }
    val desktopWebView: DesktopWebView? =
        remember(browser) {
            browser?.let { DesktopWebView(browser, scope, webViewJsBridge) }
        }

    browser?.let {
        SwingPanel(
            factory = {
                onCreated(it)
                state.webView = desktopWebView
                webViewJsBridge?.webView = desktopWebView
                browser.apply {
                    addDisplayHandler(state)
                    addLoadListener(state, navigator)
                    addRequestHandler(state, navigator)
                }
                browser.uiComponent
            },
            modifier = modifier,
        )
    }

    DisposableEffect(Unit) {
        onDispose {
            client?.dispose()
            browser?.let { currentOnDispose(it) }
        }
    }
}

--- 文件结束: WebView.desktop.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\iosMain\kotlin\com\multiplatform\webview\cookie\IOSCookieManager.kt ---
--- 大小: 5.57 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.cookie

import com.multiplatform.webview.util.KLogger
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.suspendCancellableCoroutine
import platform.Foundation.NSDate
import platform.Foundation.NSDateFormatter
import platform.Foundation.NSHTTPCookie
import platform.Foundation.NSHTTPCookieDomain
import platform.Foundation.NSHTTPCookieExpires
import platform.Foundation.NSHTTPCookieName
import platform.Foundation.NSHTTPCookiePath
import platform.Foundation.NSHTTPCookieValue
import platform.Foundation.NSLocale
import platform.Foundation.NSTimeZone
import platform.Foundation.currentLocale
import platform.Foundation.dateWithTimeIntervalSince1970
import platform.Foundation.timeIntervalSince1970
import platform.Foundation.timeZoneForSecondsFromGMT
import platform.Foundation.timeZoneWithName
import platform.WebKit.WKHTTPCookieStore
import platform.WebKit.WKWebsiteDataStore
import kotlin.coroutines.resumeWithException

/**
 * iOS implementation of [CookieManager]
 */
object IOSCookieManager : CookieManager {
    private val cookieStore: WKHTTPCookieStore =
        WKWebsiteDataStore.defaultDataStore().httpCookieStore

    @OptIn(ExperimentalCoroutinesApi::class)
    override suspend fun getCookies(url: String): List<Cookie> =
        suspendCancellableCoroutine {
            val cookieList = mutableListOf<Cookie>()
            cookieStore.getAllCookies { cookies ->
                cookies?.forEach { cookie ->
                    if (cookie is NSHTTPCookie) {
                        KLogger.d {
                            "IOSCookieManager getCookies: name: ${cookie.name}, value: ${cookie.value} url: $url, domain: ${cookie.domain}"
                        }
                        if (url.contains(cookie.domain.removePrefix("."))) {
                            cookieList.add(
                                Cookie(
                                    name = cookie.name,
                                    value = cookie.value,
                                    domain = cookie.domain,
                                    path = cookie.path,
                                    expiresDate = cookie.expiresDate?.timeIntervalSince1970?.toLong(),
                                    isSessionOnly = cookie.isSessionOnly(),
                                    sameSite = null,
                                    isSecure = cookie.isSecure(),
                                    isHttpOnly = cookie.isHTTPOnly(),
                                    maxAge = null,
                                ),
                            )
                        }
                    }
                }
                it.resume(cookieList, {})
            }
        }

    @OptIn(ExperimentalCoroutinesApi::class)
    override suspend fun removeAllCookies() =
        suspendCancellableCoroutine {
            cookieStore.getAllCookies { cookies ->
                cookies?.forEach { cookie ->
                    cookieStore.deleteCookie(cookie as NSHTTPCookie) {}
                }
                KLogger.d(tag = "iOSCookieManager") { ("IOSCookieManager removeAllCookies: $cookies") }
                it.resume(Unit, {})
            }
        }

    @OptIn(ExperimentalCoroutinesApi::class)
    override suspend fun removeCookies(url: String) =
        suspendCancellableCoroutine {
            cookieStore.getAllCookies { cookies ->
                cookies?.filter { cookie ->
                    cookie is NSHTTPCookie && url.contains(cookie.domain)
                }?.forEach { cookie ->
                    cookieStore.deleteCookie(cookie as NSHTTPCookie) {}
                }
                it.resume(Unit, {})
            }
        }

    @OptIn(ExperimentalCoroutinesApi::class)
    override suspend fun setCookie(
        url: String,
        cookie: Cookie,
    ) = suspendCancellableCoroutine {
        val iCookie =
            NSHTTPCookie.cookieWithProperties(
                mapOf(
                    NSHTTPCookieName to cookie.name,
                    NSHTTPCookieValue to cookie.value,
                    NSHTTPCookieDomain to (cookie.domain ?: ""),
                    NSHTTPCookiePath to (cookie.path ?: "/"),
                    NSHTTPCookieExpires to (
                        cookie.expiresDate?.let {
                            NSDate.dateWithTimeIntervalSince1970(
                                it.toDouble(),
                            )
                        }
                    ),
                ).filterValues { it != null },
            )
        if (iCookie == null) {
            it.resumeWithException(Exception("Cookie properties are invalid."))
        }
        cookieStore.setCookie(
            iCookie!!,
            completionHandler = {
                it.resume(Unit, {})
                KLogger.d(tag = "iOSCookieManager") { ("IOSCookieManager setCookie: $cookie") }
            },
        )
    }
}

actual fun getCookieExpirationDate(expiresDate: Long): String {
    val date = NSDate.dateWithTimeIntervalSince1970(expiresDate.toDouble())
    val dateFormatter =
        NSDateFormatter().apply {
            dateFormat = "EEE, dd MMM yyyy hh:mm:ss z"
            locale = NSLocale.currentLocale()
            timeZone = NSTimeZone.timeZoneWithName("GMT") ?: NSTimeZone.timeZoneForSecondsFromGMT(0)
        }
    return dateFormatter.stringFromDate(date)
}

/**
 * Returns an instance of [IOSCookieManager] for iOS.
 */
@Suppress("FunctionName") // Builder Function
actual fun WebViewCookieManager(): CookieManager = IOSCookieManager

--- 文件结束: IOSCookieManager.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\iosMain\kotlin\com\multiplatform\webview\jsbridge\WKJsMessageHandler.kt ---
--- 大小: 1.10 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.jsbridge

import com.multiplatform.webview.util.KLogger
import kotlinx.serialization.json.Json
import platform.WebKit.WKScriptMessage
import platform.WebKit.WKScriptMessageHandlerProtocol
import platform.WebKit.WKUserContentController
import platform.darwin.NSObject

/**
 * Created By Kevin Zou On 2023/11/1
 */

/**
 * A JS message handler for WKWebView.
 */
class WKJsMessageHandler(private val webViewJsBridge: WebViewJsBridge) :
    WKScriptMessageHandlerProtocol,
    NSObject() {
    override fun userContentController(
        userContentController: WKUserContentController,
        didReceiveScriptMessage: WKScriptMessage,
    ) {
        val body = didReceiveScriptMessage.body
        val method = didReceiveScriptMessage.name
        KLogger.info { "didReceiveScriptMessage: $body, $method" }
        (body as String).apply {
            val message = Json.decodeFromString<JsMessage>(body)
            KLogger.info {
                "WKJsMessageHandler: $message"
            }
            webViewJsBridge.dispatch(message)
        }
    }
}

--- 文件结束: WKJsMessageHandler.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\iosMain\kotlin\com\multiplatform\webview\util\Color.kt ---
--- 大小: 317.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.util

import androidx.compose.ui.graphics.Color
import platform.UIKit.UIColor

fun Color.toUIColor(): UIColor {
    return UIColor(
        red = red.toDouble(),
        green = green.toDouble(),
        blue = blue.toDouble(),
        alpha = alpha.toDouble(),
    )
}

--- 文件结束: Color.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\iosMain\kotlin\com\multiplatform\webview\util\getPlatform.kt ---
--- 大小: 580.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.util

import platform.UIKit.UIDevice

internal actual fun getPlatform(): Platform {
    return Platform.IOS
}

internal actual fun getPlatformVersion(): String {
    return UIDevice.currentDevice.systemVersion
}

internal actual fun getPlatformVersionDouble(): Double {
    val systemVersion = getPlatformVersion()
    val components = systemVersion.split(".")
    val major = components.getOrNull(0)?.toDoubleOrNull() ?: 0.0
    val minor = components.getOrNull(1)?.toDoubleOrNull() ?: 0.0
    return major + (minor / 10.0)
}

--- 文件结束: getPlatform.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\iosMain\kotlin\com\multiplatform\webview\web\IOSWebView.kt ---
--- 大小: 5.40 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import com.multiplatform.webview.jsbridge.WKJsMessageHandler
import com.multiplatform.webview.jsbridge.WebViewJsBridge
import com.multiplatform.webview.util.KLogger
import com.multiplatform.webview.util.getPlatformVersionDouble
import kotlinx.cinterop.BetaInteropApi
import kotlinx.cinterop.ExperimentalForeignApi
import kotlinx.cinterop.allocArrayOf
import kotlinx.cinterop.memScoped
import kotlinx.cinterop.useContents
import kotlinx.coroutines.CoroutineScope
import platform.Foundation.HTTPBody
import platform.Foundation.HTTPMethod
import platform.Foundation.NSBundle
import platform.Foundation.NSData
import platform.Foundation.NSMutableURLRequest
import platform.Foundation.NSURL
import platform.Foundation.create
import platform.Foundation.setValue
import platform.WebKit.WKWebView
import platform.darwin.NSObject
import platform.darwin.NSObjectMeta

/**
 * Created By Kevin Zou On 2023/9/5
 */

actual typealias NativeWebView = WKWebView

/**
 * iOS implementation of [IWebView]
 */
class IOSWebView(
    override val webView: WKWebView,
    override val scope: CoroutineScope,
    override val webViewJsBridge: WebViewJsBridge?,
) : IWebView {
    init {
        initWebView()
    }

    override fun canGoBack() = webView.canGoBack

    override fun canGoForward() = webView.canGoForward

    override fun loadUrl(
        url: String,
        additionalHttpHeaders: Map<String, String>,
    ) {
        KLogger.d { "Load url: $url" }
        val request =
            NSMutableURLRequest.requestWithURL(
                URL = NSURL(string = url),
            )
        additionalHttpHeaders.all { (key, value) ->
            request.setValue(
                value = value,
                forHTTPHeaderField = key,
            )
            true
        }
        webView.loadRequest(
            request = request,
        )
    }

    override fun loadHtml(
        html: String?,
        baseUrl: String?,
        mimeType: String?,
        encoding: String?,
        historyUrl: String?,
    ) {
        if (html == null) {
            KLogger.e {
                "LoadHtml: html is null"
            }
            return
        }
        webView.loadHTMLString(
            string = html,
            baseURL = baseUrl?.let { NSURL.URLWithString(it) },
        )
    }

    override suspend fun loadHtmlFile(fileName: String) {
        val res = NSBundle.mainBundle.resourcePath + "/compose-resources/assets/" + fileName
        val url = NSURL.fileURLWithPath(res)
        webView.loadFileURL(url, url)
    }

    @OptIn(ExperimentalForeignApi::class, BetaInteropApi::class)
    override fun postUrl(
        url: String,
        postData: ByteArray,
    ) {
        val request =
            NSMutableURLRequest(
                uRL = NSURL(string = url),
            )
        request.apply {
            HTTPMethod = "POST"
            HTTPBody =
                memScoped {
                    NSData.create(bytes = allocArrayOf(postData), length = postData.size.toULong())
                }
        }
        webView.loadRequest(request = request)
    }

    override fun goBack() {
        webView.goBack()
    }

    override fun goForward() {
        webView.goForward()
    }

    override fun reload() {
        webView.reload()
    }

    override fun stopLoading() {
        webView.stopLoading()
    }

    override fun evaluateJavaScript(
        script: String,
        callback: ((String) -> Unit)?,
    ) {
        webView.evaluateJavaScript(script) { result, error ->
            if (callback == null) return@evaluateJavaScript
            if (error != null) {
                KLogger.e { "evaluateJavaScript error: $error" }
                callback.invoke(error.localizedDescription())
            } else {
                KLogger.info { "evaluateJavaScript result: $result" }
                callback.invoke(result?.toString() ?: "")
            }
        }
    }

    override fun injectJsBridge() {
        if (webViewJsBridge == null) return
        KLogger.info {
            "iOS WebView injectJsBridge"
        }
        super.injectJsBridge()
        val callIOS =
            """
            window.${webViewJsBridge.jsBridgeName}.postMessage = function (message) {
                    window.webkit.messageHandlers.iosJsBridge.postMessage(message);
                };
            """.trimIndent()
        evaluateJavaScript(callIOS)
    }

    override fun initJsBridge(webViewJsBridge: WebViewJsBridge) {
        KLogger.info { "injectBridge" }
        val jsMessageHandler = WKJsMessageHandler(webViewJsBridge)
        webView.configuration.userContentController.apply {
            addScriptMessageHandler(jsMessageHandler, "iosJsBridge")
        }
    }

    override fun saveState(): WebViewBundle? {
        // iOS 15- does not support saving state
        if (getPlatformVersionDouble() < 15.0) {
            return null
        }
        val data = webView.interactionState as NSData?
        return data
    }

    @OptIn(ExperimentalForeignApi::class)
    override fun scrollOffset(): Pair<Int, Int> {
        val offset = webView.scrollView.contentOffset
        offset.useContents {
            return Pair(x.toInt(), y.toInt())
        }
    }

    private class BundleMarker : NSObject() {
        companion object : NSObjectMeta()
    }
}

--- 文件结束: IOSWebView.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\iosMain\kotlin\com\multiplatform\webview\web\IOSWebViewBundle.kt ---
--- 大小: 150.00 B | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

/**
 * Created By Kevin Zou On 2023/12/9
 */
actual typealias WebViewBundle = platform.Foundation.NSData

--- 文件结束: IOSWebViewBundle.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\iosMain\kotlin\com\multiplatform\webview\web\WKNavigationDelegate.kt ---
--- 大小: 6.62 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import com.multiplatform.webview.request.WebRequest
import com.multiplatform.webview.request.WebRequestInterceptResult
import com.multiplatform.webview.util.KLogger
import com.multiplatform.webview.util.getPlatformVersionDouble
import com.multiplatform.webview.util.notZero
import kotlinx.cinterop.ExperimentalForeignApi
import platform.CoreGraphics.CGPointMake
import platform.Foundation.HTTPMethod
import platform.Foundation.NSError
import platform.Foundation.allHTTPHeaderFields
import platform.WebKit.WKNavigation
import platform.WebKit.WKNavigationAction
import platform.WebKit.WKNavigationActionPolicy
import platform.WebKit.WKNavigationDelegateProtocol
import platform.WebKit.WKWebView
import platform.darwin.NSObject

/**
 * Created By Kevin Zou On 2023/9/13
 */

/**
 * Navigation delegate for the WKWebView
 */
@Suppress("CONFLICTING_OVERLOADS")
class WKNavigationDelegate(
    private val state: WebViewState,
    private val navigator: WebViewNavigator,
) : NSObject(), WKNavigationDelegateProtocol {
    private var isRedirect = false

    /**
     * Called when the web view begins to receive web content.
     */
    override fun webView(
        webView: WKWebView,
        didStartProvisionalNavigation: WKNavigation?,
    ) {
        state.loadingState = LoadingState.Loading(0f)
        state.lastLoadedUrl = webView.URL.toString()
        state.errorsForCurrentRequest.clear()
        KLogger.info {
            "didStartProvisionalNavigation"
        }
    }

    /**
     * Called when the web view receives a server redirect.
     */
    override fun webView(
        webView: WKWebView,
        didCommitNavigation: WKNavigation?,
    ) {
        val supportZoom = if (state.webSettings.supportZoom) "yes" else "no"

        @Suppress("ktlint:standard:max-line-length")
        val script =
            "var meta = document.createElement('meta');meta.setAttribute('name', 'viewport');meta.setAttribute('content', 'width=device-width, initial-scale=${state.webSettings.zoomLevel}, maximum-scale=10.0, minimum-scale=0.1,user-scalable=$supportZoom');document.getElementsByTagName('head')[0].appendChild(meta);"
        webView.evaluateJavaScript(script) { _, _ -> }
        KLogger.info { "didCommitNavigation" }
    }

    /**
     * Called when the web view finishes loading.
     */
    @OptIn(ExperimentalForeignApi::class)
    override fun webView(
        webView: WKWebView,
        didFinishNavigation: WKNavigation?,
    ) {
        state.pageTitle = webView.title
        state.lastLoadedUrl = webView.URL.toString()
        state.loadingState = LoadingState.Finished
        navigator.canGoBack = webView.canGoBack
        navigator.canGoForward = webView.canGoForward
        // Restore scroll position on iOS 14 and below
        if (getPlatformVersionDouble() < 15.0) {
            if (state.scrollOffset.notZero()) {
                webView.scrollView.setContentOffset(
                    CGPointMake(
                        x = state.scrollOffset.first.toDouble(),
                        y = state.scrollOffset.second.toDouble(),
                    ),
                    true,
                )
            }
        }
        KLogger.info { "didFinishNavigation ${state.lastLoadedUrl}" }
    }

    /**
     * Called when the web view fails to load content.
     */
    override fun webView(
        webView: WKWebView,
        didFailProvisionalNavigation: WKNavigation?,
        withError: NSError,
    ) {
        KLogger.e {
            "WebView Loading Failed with error: ${withError.localizedDescription}"
        }
        state.errorsForCurrentRequest.add(
            WebViewError(
                code = withError.code.toInt(),
                description = withError.localizedDescription,
                // on iOS all errors are from the main frame
                isFromMainFrame = true,
            ),
        )
        KLogger.e {
            "didFailNavigation"
        }
    }

    override fun webView(
        webView: WKWebView,
        decidePolicyForNavigationAction: WKNavigationAction,
        decisionHandler: (WKNavigationActionPolicy) -> Unit,
    ) {
        val url = decidePolicyForNavigationAction.request.URL?.absoluteString
        KLogger.info {
            "Outer decidePolicyForNavigationAction: $url $isRedirect $decidePolicyForNavigationAction"
        }
        if (url != null && !isRedirect &&
            navigator.requestInterceptor != null &&
            decidePolicyForNavigationAction.targetFrame?.mainFrame != false
        ) {
            navigator.requestInterceptor.apply {
                val request = decidePolicyForNavigationAction.request
                val headerMap = mutableMapOf<String, String>()
                request.allHTTPHeaderFields?.forEach {
                    headerMap[it.key.toString()] = it.value.toString()
                }
                KLogger.info {
                    "decidePolicyForNavigationAction: ${request.URL?.absoluteString}, $headerMap"
                }
                val webRequest =
                    WebRequest(
                        request.URL?.absoluteString ?: "",
                        headerMap,
                        decidePolicyForNavigationAction.targetFrame?.mainFrame ?: false,
                        isRedirect,
                        request.HTTPMethod ?: "GET",
                    )
                val interceptResult =
                    navigator.requestInterceptor.onInterceptUrlRequest(
                        webRequest,
                        navigator,
                    )
                when (interceptResult) {
                    is WebRequestInterceptResult.Allow -> {
                        decisionHandler(WKNavigationActionPolicy.WKNavigationActionPolicyAllow)
                    }

                    is WebRequestInterceptResult.Reject -> {
                        decisionHandler(WKNavigationActionPolicy.WKNavigationActionPolicyCancel)
                    }

                    is WebRequestInterceptResult.Modify -> {
                        isRedirect = true
                        interceptResult.request.apply {
                            navigator.stopLoading()
                            navigator.loadUrl(this.url, this.headers)
                        }
                        decisionHandler(WKNavigationActionPolicy.WKNavigationActionPolicyCancel)
                    }
                }
            }
        } else {
            isRedirect = false
            decisionHandler(WKNavigationActionPolicy.WKNavigationActionPolicyAllow)
        }
    }
}

--- 文件结束: WKNavigationDelegate.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\iosMain\kotlin\com\multiplatform\webview\web\WKWebViewExt.kt ---
--- 大小: 1.51 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import kotlinx.cinterop.ExperimentalForeignApi
import platform.Foundation.addObserver
import platform.Foundation.removeObserver
import platform.WebKit.WKWebView
import platform.darwin.NSObject

/**
 * Created By Kevin Zou On 2023/9/13
 */
val observedProgressList =
    listOf(
        "estimatedProgress",
        "title",
        "URL",
        "canGoBack",
        "canGoForward",
    )

/**
 * Adds observers for the given properties
 */
@OptIn(ExperimentalForeignApi::class)
fun WKWebView.addObservers(
    observer: NSObject,
    properties: List<String>,
) {
    properties.forEach {
        this.addObserver(
            observer,
            forKeyPath = it,
            options = platform.Foundation.NSKeyValueObservingOptionNew,
            context = null,
        )
    }
}

/**
 * Removes observers for the given properties
 */
fun WKWebView.removeObservers(
    observer: NSObject,
    properties: List<String>,
) {
    properties.forEach {
        this.removeObserver(observer, forKeyPath = it)
    }
}

@OptIn(ExperimentalForeignApi::class)
fun WKWebView.addProgressObservers(observer: NSObject) {
    this.addObservers(
        observer = observer,
        properties = observedProgressList,
    )
}

/**
 * Removes observers for the given properties
 */
fun WKWebView.removeProgressObservers(observer: NSObject) {
    this.removeObservers(
        observer = observer,
        properties = observedProgressList,
    )
}

--- 文件结束: WKWebViewExt.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\iosMain\kotlin\com\multiplatform\webview\web\WKWebViewObserver.kt ---
--- 大小: 2.28 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import com.multiplatform.webview.util.KLogger
import kotlinx.cinterop.COpaquePointer
import kotlinx.cinterop.ExperimentalForeignApi
import observer.ObserverProtocol
import platform.Foundation.NSNumber
import platform.Foundation.NSURL
import platform.darwin.NSObject

/**
 * Created By Kevin Zou On 2023/9/13
 */

/**
 * Observer for the WKWebView's loading state
 */
@ExperimentalForeignApi
class WKWebViewObserver(private val state: WebViewState, private val navigator: WebViewNavigator) :
    NSObject(),
    ObserverProtocol {
    override fun observeValueForKeyPath(
        keyPath: String?,
        ofObject: Any?,
        change: Map<Any?, *>?,
        context: COpaquePointer?,
    ) {
        if (keyPath == "estimatedProgress") {
            val progress = change?.get("new") as? NSNumber
            KLogger.d { "Observe estimatedProgress Changed $progress" }
            if (progress != null) {
                state.loadingState = LoadingState.Loading(progress.floatValue)
                if (progress.floatValue >= 1.0f) {
                    state.loadingState = LoadingState.Finished
                }
            }
        } else if (keyPath == "title") {
            val title = change?.get("new") as? String
            KLogger.info { "Observe title Changed $title" }
            if (title != null) {
                state.pageTitle = title
            }
        } else if (keyPath == "URL") {
            val url = change?.get("new") as? NSURL
            KLogger.info { "Observe URL Changed ${url?.absoluteString}" }
            if (url != null) {
                state.lastLoadedUrl = url.absoluteString
            }
        } else if (keyPath == "canGoBack") {
            val canGoBack = change?.get("new") as? NSNumber
            KLogger.d { "Observe canGoBack Changed $canGoBack" }
            if (canGoBack != null) {
                navigator.canGoBack = canGoBack.boolValue
            }
        } else if (keyPath == "canGoForward") {
            val canGoForward = change?.get("new") as? NSNumber
            KLogger.d { "Observe canGoForward Changed $canGoForward" }
            if (canGoForward != null) {
                navigator.canGoForward = canGoForward.boolValue
            }
        }
    }
}

--- 文件结束: WKWebViewObserver.kt ---

--- 文件: D:\code\compose-webview-multiplatform\webview\src\iosMain\kotlin\com\multiplatform\webview\web\WebView.ios.kt ---
--- 大小: 6.40 KB | 修改时间: Wed Jun 04 07:12:19 CST 2025 ---

package com.multiplatform.webview.web

import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.viewinterop.UIKitInteropInteractionMode
import androidx.compose.ui.viewinterop.UIKitInteropProperties
import androidx.compose.ui.viewinterop.UIKitView
import com.multiplatform.webview.jsbridge.WebViewJsBridge
import com.multiplatform.webview.util.toUIColor
import kotlinx.cinterop.ExperimentalForeignApi
import kotlinx.cinterop.readValue
import platform.CoreGraphics.CGRectZero
import platform.Foundation.setValue
import platform.WebKit.WKAudiovisualMediaTypeAll
import platform.WebKit.WKAudiovisualMediaTypeNone
import platform.WebKit.WKWebView
import platform.WebKit.WKWebViewConfiguration
import platform.WebKit.javaScriptEnabled

/**
 * iOS WebView implementation.
 */
@Composable
actual fun ActualWebView(
    state: WebViewState,
    modifier: Modifier,
    captureBackPresses: Boolean,
    navigator: WebViewNavigator,
    webViewJsBridge: WebViewJsBridge?,
    onCreated: (NativeWebView) -> Unit,
    onDispose: (NativeWebView) -> Unit,
    platformWebViewParams: PlatformWebViewParams?,
    factory: (WebViewFactoryParam) -> NativeWebView,
) {
    IOSWebView(
        state = state,
        modifier = modifier,
        captureBackPresses = captureBackPresses,
        navigator = navigator,
        webViewJsBridge = webViewJsBridge,
        onCreated = onCreated,
        onDispose = onDispose,
        factory = factory,
    )
}

/** iOS WebView factory parameters: configuration created from WebSettings. */
actual data class WebViewFactoryParam(val config: WKWebViewConfiguration)

actual class PlatformWebViewParams

/** Default WebView factory for iOS. */
@OptIn(ExperimentalForeignApi::class)
actual fun defaultWebViewFactory(param: WebViewFactoryParam) = WKWebView(frame = CGRectZero.readValue(), configuration = param.config)

/**
 * iOS WebView implementation.
 */
@OptIn(ExperimentalForeignApi::class, ExperimentalComposeUiApi::class)
@Composable
fun IOSWebView(
    state: WebViewState,
    modifier: Modifier,
    captureBackPresses: Boolean,
    navigator: WebViewNavigator,
    webViewJsBridge: WebViewJsBridge?,
    onCreated: (NativeWebView) -> Unit,
    onDispose: (NativeWebView) -> Unit,
    factory: (WebViewFactoryParam) -> NativeWebView,
) {
    val observer =
        remember {
            WKWebViewObserver(
                state = state,
                navigator = navigator,
            )
        }
    val navigationDelegate = remember { WKNavigationDelegate(state, navigator) }
    val scope = rememberCoroutineScope()

    UIKitView(
        factory = {
            val config =
                WKWebViewConfiguration().apply {
                    allowsInlineMediaPlayback = true
                    mediaTypesRequiringUserActionForPlayback =
                        if (state.webSettings.iOSWebSettings.mediaPlaybackRequiresUserGesture) {
                            WKAudiovisualMediaTypeAll
                        } else {
                            WKAudiovisualMediaTypeNone
                        }
                    defaultWebpagePreferences.allowsContentJavaScript =
                        state.webSettings.isJavaScriptEnabled
                    preferences.apply {
                        setValue(
                            state.webSettings.allowFileAccessFromFileURLs,
                            forKey = "allowFileAccessFromFileURLs",
                        )
                        javaScriptEnabled = state.webSettings.isJavaScriptEnabled
                    }
                    setValue(
                        state.webSettings.allowUniversalAccessFromFileURLs,
                        forKey = "allowUniversalAccessFromFileURLs",
                    )
                }
            factory(WebViewFactoryParam(config)).apply {
                onCreated(this)
                state.viewState?.let {
                    this.interactionState = it
                }
                allowsBackForwardNavigationGestures = captureBackPresses
                customUserAgent = state.webSettings.customUserAgentString
                this.addProgressObservers(
                    observer = observer,
                )
                this.navigationDelegate = navigationDelegate

                state.webSettings.let {
                    val backgroundColor =
                        (it.iOSWebSettings.backgroundColor ?: it.backgroundColor).toUIColor()
                    val scrollViewColor =
                        (
                            it.iOSWebSettings.underPageBackgroundColor
                                ?: it.backgroundColor
                        ).toUIColor()
                    setOpaque(it.iOSWebSettings.opaque)
                    if (!it.iOSWebSettings.opaque) {
                        setBackgroundColor(backgroundColor)
                        scrollView.setBackgroundColor(scrollViewColor)
                    }
                    scrollView.pinchGestureRecognizer?.enabled = it.supportZoom
                }
                state.webSettings.iOSWebSettings.let {
                    with(scrollView) {
                        bounces = it.bounces
                        scrollEnabled = it.scrollEnabled
                        showsHorizontalScrollIndicator = it.showHorizontalScrollIndicator
                        showsVerticalScrollIndicator = it.showVerticalScrollIndicator
                    }
                }

                this.setInspectable(state.webSettings.iOSWebSettings.isInspectable)
            }.also {
                val iosWebView = IOSWebView(it, scope, webViewJsBridge)
                state.webView = iosWebView
                webViewJsBridge?.webView = iosWebView
            }
        },
        modifier = modifier,
        onRelease = {
            state.webView = null
            it.removeProgressObservers(
                observer = observer,
            )
            it.navigationDelegate = null
            onDispose(it)
        },
        properties =
            UIKitInteropProperties(
                interactionMode = UIKitInteropInteractionMode.NonCooperative,
                isNativeAccessibilityEnabled = true,
            ),
    )
}

--- 文件结束: WebView.ios.kt ---


========== 合并统计 ==========
合并时间: Fri Jun 06 20:26:18 CST 2025
总文件数: 80
总大小: 209.52 KB
字符编码: UTF-8
